<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IFramework</name>
    </assembly>
    <members>
        <member name="T:IFramework.IEnvironment">
            <summary>
            环境
            </summary>
        </member>
        <member name="P:IFramework.IEnvironment.envType">
            <summary>
            环境类型
            </summary>
        </member>
        <member name="P:IFramework.IEnvironment.inited">
            <summary>
            是否初始化完成
            </summary>
        </member>
        <member name="P:IFramework.IEnvironment.modules">
            <summary>
            模块容器
            </summary>
        </member>
        <member name="P:IFramework.IEnvironment.time">
            <summary>
            时间
            </summary>
        </member>
        <member name="M:IFramework.IEnvironment.BindDispose(System.Action)">
            <summary>
            绑定 Dispose
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:IFramework.IEnvironment.BindUpdate(System.Action)">
            <summary>
            绑定 Update
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:IFramework.IEnvironment.Init(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            初始化
            </summary>
            <param name="types"></param>
        </member>
        <member name="M:IFramework.IEnvironment.InitWithAttribute">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:IFramework.IEnvironment.UnBindDispose(System.Action)">
            <summary>
            解绑 Dispose
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:IFramework.IEnvironment.UnBindUpdate(System.Action)">
            <summary>
            解绑 Update
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:IFramework.IEnvironment.Update">
            <summary>
            刷新
            </summary>
        </member>
        <member name="M:IFramework.IEnvironment.WaitEnvironmentFrame``1(``0)">
            <summary>
            等待环境刷新
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:IFramework.IEnvironment.UnSubscribeWaitEnvironmentFrameHandler``1(System.Action{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="action"></param>
        </member>
        <member name="M:IFramework.IEnvironment.SubscribeWaitEnvironmentFrameHandler``1(System.Action{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="action"></param>
        </member>
        <member name="T:IFramework.ITimeCalculator">
            <summary>
            时间计算
            </summary>
        </member>
        <member name="P:IFramework.ITimeCalculator.deltaTime">
            <summary>
            每次刷新的时间
            </summary>
        </member>
        <member name="P:IFramework.ITimeCalculator.timeSinceInit">
            <summary>
            初始化-现在时间
            </summary>
        </member>
        <member name="T:IFramework.Coroutine.CoroutineState">
            <summary>
            携程的状态
            </summary>
        </member>
        <member name="F:IFramework.Coroutine.CoroutineState.Working">
            <summary>
            干活中
            </summary>
        </member>
        <member name="F:IFramework.Coroutine.CoroutineState.Yied">
            <summary>
            挂起中，刚创建/主动挂起了
            </summary>
        </member>
        <member name="F:IFramework.Coroutine.CoroutineState.Rest">
            <summary>
            干完了，第一帧，处于等待被回收
            休息中
            </summary>
        </member>
        <member name="T:IFramework.Coroutine.CoroutineModuleEx">
            <summary>
            协程模块扩展
            </summary>
        </member>
        <member name="M:IFramework.Coroutine.CoroutineModuleEx.StartCoroutine(System.Object,System.Collections.IEnumerator,IFramework.EnvironmentType)">
            <summary>
            开启一个协程
            </summary>
            <param name="obj"></param>
            <param name=" envType"></param>
            <param name="routine">迭代器</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Coroutine.CoroutineModuleEx.StartCoroutine(System.Object,System.Collections.IEnumerator,IFramework.IEnvironment)">
            <summary>
            开启一个协程
            </summary>
            <param name="obj"></param>
            <param name="env"></param>
            <param name="routine">迭代器</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Coroutine.CoroutineModuleEx.StopCoroutine(System.Object,IFramework.Coroutine.ICoroutine)">
            <summary>
            结束一个协程
            </summary>
            <param name="obj"></param>
            <param name="routine">迭代器</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Coroutine.CoroutineModuleEx.OnCompelete(IFramework.Coroutine.ICoroutine,System.Action)">
            <summary>
            结束回调
            </summary>
            <param name="self"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:IFramework.Coroutine.ICoroutine">
            <summary>
            协程实体
            </summary>
        </member>
        <member name="P:IFramework.Coroutine.ICoroutine.state">
            <summary>
            目前状态
            </summary>
        </member>
        <member name="M:IFramework.Coroutine.ICoroutine.Compelete">
            <summary>
            手动结束
            </summary>
        </member>
        <member name="M:IFramework.Coroutine.ICoroutine.Pause">
            <summary>
            挂起
            </summary>
        </member>
        <member name="M:IFramework.Coroutine.ICoroutine.Resume">
            <summary>
            恢复运行
            </summary>
        </member>
        <member name="T:IFramework.Coroutine.ICoroutineModule">
            <summary>
            协程模块
            </summary>
        </member>
        <member name="M:IFramework.Coroutine.ICoroutineModule.CreateCoroutine(System.Collections.IEnumerator)">
            <summary>
            创建一个携程不跑
            </summary>
            <param name="routine"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Coroutine.ICoroutineModule.StartCoroutine(System.Collections.IEnumerator)">
            <summary>
            开启一个协程
            CreateCoroutine + ResumeCoroutine
            </summary>
            <param name="routine"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Coroutine.ICoroutineModule.PauseCoroutine(IFramework.Coroutine.ICoroutine)">
            <summary>
            挂起携程
            </summary>
            <param name="coroutine"></param>
        </member>
        <member name="M:IFramework.Coroutine.ICoroutineModule.ResumeCoroutine(IFramework.Coroutine.ICoroutine)">
            <summary>
            恢复运行
            </summary>
            <param name="coroutine"></param>
        </member>
        <member name="M:IFramework.Coroutine.ICoroutineModule.StopCoroutine(IFramework.Coroutine.ICoroutine)">
            <summary>
            关闭一个携程
            </summary>
            <param name="coroutine"></param>
        </member>
        <member name="T:IFramework.Coroutine.Coroutine">
            <summary>
            协程 模拟
            </summary>
        </member>
        <member name="M:IFramework.Coroutine.Coroutine.Compelete">
            <summary>
            协程完成时候回调
            </summary>
            <summary>
            手动结束协程
            </summary>
        </member>
        <member name="T:IFramework.Coroutine.YieldInstruction">
            <summary>
            所有等待类的基类
            </summary>
        </member>
        <member name="P:IFramework.Coroutine.YieldInstruction.isDone">
            <summary>
            是否结束
            </summary>
        </member>
        <member name="M:IFramework.Coroutine.YieldInstruction.IsCompelete">
            <summary>
            是否结束
            </summary>
            <returns></returns>
        </member>
        <member name="T:IFramework.Coroutine.CoroutineModule">
            <summary>
            协程模块
            </summary>
        </member>
        <member name="M:IFramework.Coroutine.CoroutineModule.OnGetDefautPriority">
            <summary>
            优先级
            </summary>
        </member>
        <member name="M:IFramework.Coroutine.CoroutineModule.CreateCoroutine(System.Collections.IEnumerator)">
            <summary>
            创建一个携程不跑
            </summary>
            <param name="routine"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Coroutine.CoroutineModule.StartCoroutine(System.Collections.IEnumerator)">
            <summary>
            开启一个协程
            </summary>
            <param name="routine"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Coroutine.CoroutineModule.PauseCoroutine(IFramework.Coroutine.ICoroutine)">
            <summary>
            挂起携程
            </summary>
            <param name="coroutine"></param>
        </member>
        <member name="M:IFramework.Coroutine.CoroutineModule.ResumeCoroutine(IFramework.Coroutine.ICoroutine)">
            <summary>
            恢复运行
            </summary>
            <param name="coroutine"></param>
        </member>
        <member name="M:IFramework.Coroutine.CoroutineModule.StopCoroutine(IFramework.Coroutine.ICoroutine)">
            <summary>
            关闭一个携程
            </summary>
            <param name="coroutine"></param>
        </member>
        <member name="T:IFramework.Coroutine.WaitForDays">
            <summary>
            等待日子
            </summary>
        </member>
        <member name="M:IFramework.Coroutine.WaitForDays.#ctor(System.Double)">
            <summary>
            Ctor
            </summary>
            <param name="days">天数</param>
        </member>
        <member name="T:IFramework.Coroutine.WaitForFrame">
            <summary>
            等一帧
            </summary>
        </member>
        <member name="M:IFramework.Coroutine.WaitForFrame.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="T:IFramework.Coroutine.WaitForFrames">
            <summary>
            等待帧数
            </summary>
        </member>
        <member name="M:IFramework.Coroutine.WaitForFrames.#ctor(System.Int32)">
            <summary>
            Ctor
            </summary>
            <param name="count">帧数 </param>
        </member>
        <member name="M:IFramework.Coroutine.WaitForFrames.IsCompelete">
            <summary>
            over
            </summary>
            <returns></returns>
        </member>
        <member name="T:IFramework.Coroutine.WaitForHours">
            <summary>
            等待小时
            </summary>
        </member>
        <member name="M:IFramework.Coroutine.WaitForHours.#ctor(System.Double)">
            <summary>
            Ctor
            </summary>
            <param name="hours">小时</param>
        </member>
        <member name="T:IFramework.Coroutine.WaitForMilliseconds">
            <summary>
            等待毫秒
            </summary>
        </member>
        <member name="M:IFramework.Coroutine.WaitForMilliseconds.#ctor(System.Double)">
            <summary>
            Ctor
            </summary>
            <param name="milliseconds">毫秒</param>
        </member>
        <member name="T:IFramework.Coroutine.WaitForMinutes">
            <summary>
            等待分钟
            </summary>
        </member>
        <member name="M:IFramework.Coroutine.WaitForMinutes.#ctor(System.Double)">
            <summary>
            Ctor
            </summary>
            <param name="minutes">等待分钟数</param>
        </member>
        <member name="T:IFramework.Coroutine.WaitForSeconds">
            <summary>
            等待秒
            </summary>
        </member>
        <member name="M:IFramework.Coroutine.WaitForSeconds.#ctor(System.Double)">
            <summary>
            Ctor
            </summary>
            <param name="seconds">等待秒数</param>
        </member>
        <member name="T:IFramework.Coroutine.WaitForTicks">
            <summary>
            等待ticks(100微秒)
            </summary>
        </member>
        <member name="M:IFramework.Coroutine.WaitForTicks.#ctor(System.Int64)">
            <summary>
            Ctor
            </summary>
            <param name="ticks">等待的tick数</param>
        </member>
        <member name="T:IFramework.Coroutine.WaitForTimeSpan">
            <summary>
            等待时间
            </summary>
        </member>
        <member name="M:IFramework.Coroutine.WaitForTimeSpan.#ctor(System.TimeSpan)">
            <summary>
            Ctor
            </summary>
            <param name="span"> 等待时间</param>
        </member>
        <member name="M:IFramework.Coroutine.WaitForTimeSpan.IsCompelete">
            <summary>
            override
            </summary>
            <returns></returns>
        </member>
        <member name="T:IFramework.Coroutine.WaitUtil">
            <summary>
            等待条件成立
            </summary>
        </member>
        <member name="M:IFramework.Coroutine.WaitUtil.#ctor(System.Func{System.Boolean})">
            <summary>
            Ctor
            </summary>
            <param name="condition">等待成立条件</param>
        </member>
        <member name="M:IFramework.Coroutine.WaitUtil.IsCompelete">
            <summary>
            override
            </summary>
            <returns></returns>
        </member>
        <member name="T:IFramework.Coroutine.WaitWhile">
            <summary>
            等待条件不成立
            </summary>
        </member>
        <member name="M:IFramework.Coroutine.WaitWhile.#ctor(System.Func{System.Boolean})">
            <summary>
            Ctor
            </summary>
            <param name="condition">等待不成立条件</param>
        </member>
        <member name="M:IFramework.Coroutine.WaitWhile.IsCompelete">
            <summary>
            override
            </summary>
            <returns></returns>
        </member>
        <member name="T:IFramework.Inject.IInjectModule">
            <summary>
            
            </summary>
        </member>
        <member name="M:IFramework.Inject.IInjectModule.Clear">
            <summary>
            清除
            </summary>
        </member>
        <member name="M:IFramework.Inject.IInjectModule.Inject(System.Object)">
            <summary>
            反射注入
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:IFramework.Inject.IInjectModule.InjectInstances">
            <summary>
            注入所有
            </summary>
        </member>
        <member name="M:IFramework.Inject.IInjectModule.Subscribe``1(System.String)">
            <summary>
            注册
            </summary>
            <typeparam name="Type"></typeparam>
            <param name="name"></param>
        </member>
        <member name="M:IFramework.Inject.IInjectModule.Subscribe``2(System.String)">
            <summary>
            注册
            </summary>
            <typeparam name="BaseType"></typeparam>
            <typeparam name="Type"></typeparam>
            <param name="name"></param>
        </member>
        <member name="M:IFramework.Inject.IInjectModule.Subscribe(System.Type,System.Type,System.String)">
            <summary>
            注册
            </summary>
            <param name="source"></param>
            <param name="target"></param>
            <param name="name"></param>
        </member>
        <member name="M:IFramework.Inject.IInjectModule.SubscribeInstance``1(``0,System.String,System.Boolean)">
            <summary>
            注册实例
            </summary>
            <typeparam name="Type"></typeparam>
            <param name="instance"></param>
            <param name="name"></param>
            <param name="inject"></param>
        </member>
        <member name="M:IFramework.Inject.IInjectModule.SubscribeInstance(System.Type,System.Object,System.String,System.Boolean)">
            <summary>
            注册实例
            </summary>
            <param name="baseType"></param>
            <param name="instance"></param>
            <param name="name"></param>
            <param name="inject"></param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:IFramework.Inject.IInjectModule.GetValue``1(System.String,System.Object[])">
            <summary>
            获取
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Inject.IInjectModule.GetValue(System.Type,System.String,System.Object[])">
            <summary>
            获取
            </summary>
            <param name="baseType"></param>
            <param name="name"></param>
            <param name="constructorArgs"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Inject.IInjectModule.GetValues(System.Type)">
            <summary>
            获取
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Inject.IInjectModule.GetValues``1">
            <summary>
            获取
            </summary>
            <typeparam name="Type"></typeparam>
            <returns></returns>
        </member>
        <member name="T:IFramework.Inject.InjectModule">
            <summary>
            注入模块
            </summary>
        </member>
        <member name="M:IFramework.Inject.InjectModule.Clear">
            <summary>
            清除
            </summary>
        </member>
        <member name="M:IFramework.Inject.InjectModule.Inject(System.Object)">
            <summary>
            反射注入
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:IFramework.Inject.InjectModule.InjectInstances">
            <summary>
            注入所有
            </summary>
        </member>
        <member name="M:IFramework.Inject.InjectModule.Subscribe``1(System.String)">
            <summary>
            注册
            </summary>
            <typeparam name="Type"></typeparam>
            <param name="name"></param>
        </member>
        <member name="M:IFramework.Inject.InjectModule.Subscribe``2(System.String)">
            <summary>
            注册
            </summary>
            <typeparam name="BaseType"></typeparam>
            <typeparam name="Type"></typeparam>
            <param name="name"></param>
        </member>
        <member name="M:IFramework.Inject.InjectModule.Subscribe(System.Type,System.Type,System.String)">
            <summary>
            注册
            </summary>
            <param name="source"></param>
            <param name="target"></param>
            <param name="name"></param>
        </member>
        <member name="M:IFramework.Inject.InjectModule.SubscribeInstance``1(``0,System.String,System.Boolean)">
            <summary>
            注册实例
            </summary>
            <typeparam name="Type"></typeparam>
            <param name="instance"></param>
            <param name="name"></param>
            <param name="inject"></param>
        </member>
        <member name="M:IFramework.Inject.InjectModule.SubscribeInstance(System.Type,System.Object,System.String,System.Boolean)">
            <summary>
            注册实例
            </summary>
            <param name="baseType"></param>
            <param name="instance"></param>
            <param name="name"></param>
            <param name="inject"></param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:IFramework.Inject.InjectModule.GetValue``1(System.String,System.Object[])">
            <summary>
            获取
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Inject.InjectModule.GetValue(System.Type,System.String,System.Object[])">
            <summary>
            获取
            </summary>
            <param name="baseType"></param>
            <param name="name"></param>
            <param name="constructorArgs"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Inject.InjectModule.GetValues(System.Type)">
            <summary>
            获取
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Inject.InjectModule.GetValues``1">
            <summary>
            获取
            </summary>
            <typeparam name="Type"></typeparam>
            <returns></returns>
        </member>
        <member name="T:IFramework.Inject.InjectAttribute">
            <summary>
            注入标记
            </summary>
        </member>
        <member name="P:IFramework.Inject.InjectAttribute.name">
            <summary>
            注入名
            </summary>
        </member>
        <member name="M:IFramework.Inject.InjectAttribute.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:IFramework.Message.IStringMessageModule">
            <summary>
            消息模块（String版本）
            </summary>
        </member>
        <member name="P:IFramework.Message.IStringMessageModule.count">
            <summary>
            剩余消息数目
            </summary>
        </member>
        <member name="P:IFramework.Message.IStringMessageModule.processesPerFrame">
            <summary>
            每一帧处理消息上限
            </summary>
        </member>
        <member name="M:IFramework.Message.IStringMessageModule.Publish(System.String,IFramework.IEventArgs,System.Int32,IFramework.Message.MessageUrgencyType)">
            <summary>
            发布消息
            </summary>
            <param name="type"></param>
            <param name="args"></param>
            <param name="code"></param>
            <param name="priority"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Message.IStringMessageModule.PublishByNumber(System.String,IFramework.IEventArgs,System.Int32,System.Int32)">
            <summary>
            发布消息
            </summary>
            <param name="type"></param>
            <param name="args"></param>
            <param name="code"></param>
            <param name="priority"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Message.IStringMessageModule.Subscribe(System.String,IFramework.Message.IMessageListener)">
            <summary>
            注册
            </summary>
            <param name="type"></param>
            <param name="listener"></param>
        </member>
        <member name="M:IFramework.Message.IStringMessageModule.Subscribe(System.String,IFramework.Message.MessageListener)">
            <summary>
            注册
            </summary>
            <param name="type"></param>
            <param name="listener"></param>
        </member>
        <member name="M:IFramework.Message.IStringMessageModule.UnSubscribe(System.String,IFramework.Message.IMessageListener)">
            <summary>
            移除
            </summary>
            <param name="type"></param>
            <param name="listener"></param>
        </member>
        <member name="M:IFramework.Message.IStringMessageModule.UnSubscribe(System.String,IFramework.Message.MessageListener)">
            <summary>
            移除
            </summary>
            <param name="type"></param>
            <param name="listener"></param>
        </member>
        <member name="T:IFramework.Message.IMessage">
            <summary>
            消息
            </summary>
        </member>
        <member name="P:IFramework.Message.IMessage.subject">
            <summary>
            发送消息类型
            </summary>
        </member>
        <member name="P:IFramework.Message.IMessage.stringSubject">
            <summary>
            发送消息类型
            </summary>
        </member>
        <member name="P:IFramework.Message.IMessage.args">
            <summary>
            承载消息内容
            </summary>
        </member>
        <member name="P:IFramework.Message.IMessage.code">
            <summary>
            code,帮助区分 args
            </summary>
        </member>
        <member name="P:IFramework.Message.IMessage.state">
            <summary>
            消息状态
            </summary>
        </member>
        <member name="P:IFramework.Message.IMessage.errorCode">
            <summary>
            消息发送结果
            </summary>
        </member>
        <member name="P:IFramework.Message.IMessage.type">
            <summary>
            消息主题类型
            </summary>
        </member>
        <member name="M:IFramework.Message.IMessage.SetCode(System.Int32)">
            <summary>
            设置Code，
            仅在 state 为 MessageState.Wait时有效
            </summary>
            <param name="code"></param>
        </member>
        <member name="M:IFramework.Message.IMessage.OnCompelete(System.Action{IFramework.Message.IMessage})">
            <summary>
            仅在 state 为 MessageState.Wait时有效
            消息发布完成时的引用
            </summary>
            <param name="action"></param>
        </member>
        <member name="T:IFramework.Message.MessageErrorCode">
            <summary>
            消息发送结果
            </summary>
        </member>
        <member name="F:IFramework.Message.MessageErrorCode.None">
            <summary>
            无状态,即不在使用
            </summary>
        </member>
        <member name="F:IFramework.Message.MessageErrorCode.Success">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:IFramework.Message.MessageErrorCode.NoneListen">
            <summary>
            无人监听
            </summary>
        </member>
        <member name="T:IFramework.Message.SubjectType">
            <summary>
            消息主题类型
            </summary>
        </member>
        <member name="F:IFramework.Message.SubjectType.None">
            <summary>
            未知
            </summary>
        </member>
        <member name="F:IFramework.Message.SubjectType.String">
            <summary>
            String
            </summary>
        </member>
        <member name="F:IFramework.Message.SubjectType.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="T:IFramework.Message.MessageModule">
            <summary>
            消息模块
            </summary>
        </member>
        <member name="P:IFramework.Message.MessageModule.count">
            <summary>
            剩余消息数目
            </summary>
        </member>
        <member name="P:IFramework.Message.MessageModule.fitSubType">
            <summary>
            适配子类型
            </summary>
        </member>
        <member name="P:IFramework.Message.MessageModule.processesPerFrame">
            <summary>
            每帧处理消息个数
            </summary>
        </member>
        <member name="M:IFramework.Message.MessageModule.Subscribe(System.Type,IFramework.Message.IMessageListener)">
            <summary>
            注册监听
            </summary>
            <param name="type"></param>
            <param name="listener"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Message.MessageModule.Subscribe``1(IFramework.Message.IMessageListener)">
            <summary>
            注册监听
            </summary>
            <typeparam name="T"></typeparam>
            <param name="listener"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Message.MessageModule.UnSubscribe(System.Type,IFramework.Message.IMessageListener)">
            <summary>
            解除注册监听
            </summary>
            <param name="type"></param>
            <param name="listener"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Message.MessageModule.UnSubscribe``1(IFramework.Message.IMessageListener)">
            <summary>
            解除注册监听
            </summary>
            <param name="listener"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Message.MessageModule.Subscribe(System.Type,IFramework.Message.MessageListener)">
            <summary>
            注册监听
            </summary>
            <param name="type"></param>
            <param name="listener"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Message.MessageModule.Subscribe``1(IFramework.Message.MessageListener)">
            <summary>
            注册监听
            </summary>
            <typeparam name="T"></typeparam>
            <param name="listener"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Message.MessageModule.UnSubscribe(System.Type,IFramework.Message.MessageListener)">
            <summary>
            解除注册监听
            </summary>
            <param name="type"></param>
            <param name="listener"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Message.MessageModule.UnSubscribe``1(IFramework.Message.MessageListener)">
            <summary>
            解除注册监听
            </summary>
            <param name="listener"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Message.MessageModule.Publish``1(IFramework.IEventArgs,System.Int32,IFramework.Message.MessageUrgencyType)">
            <summary>
            发布消息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="args"></param>
            <param name="code"></param>
            <param name="priority"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Message.MessageModule.Publish``1(``0,IFramework.IEventArgs,System.Int32,IFramework.Message.MessageUrgencyType)">
            <summary>
            发布消息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <param name="args"></param>
            <param name="code"></param>
            <param name="priority"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Message.MessageModule.PublishByNumber``1(IFramework.IEventArgs,System.Int32,System.Int32)">
            <summary>
            发布消息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="args"></param>
            <param name="code"></param>
            <param name="priority"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Message.MessageModule.PublishByNumber``1(``0,IFramework.IEventArgs,System.Int32,System.Int32)">
            <summary>
            发布消息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <param name="args"></param>
            <param name="code"></param>
            <param name="priority"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Message.MessageModule.Publish(System.Type,IFramework.IEventArgs,System.Int32,IFramework.Message.MessageUrgencyType)">
            <summary>
            发布消息
            </summary>
            <param name="type"></param>
            <param name="args"></param>
            <param name="code"></param>
            <param name="priority"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Message.MessageModule.PublishByNumber(System.Type,IFramework.IEventArgs,System.Int32,System.Int32)">
            <summary>
            发布消息
            </summary>
            <param name="type"></param>
            <param name="args"></param>
            <param name="code"></param>
            <param name="priority">越大处理越晚</param>
            <returns></returns>
        </member>
        <member name="T:IFramework.Message.StringMessageModule">
            <summary>
            消息模块（String版本）
            </summary>
        </member>
        <member name="P:IFramework.Message.StringMessageModule.count">
            <summary>
            剩余消息数目
            </summary>
        </member>
        <member name="P:IFramework.Message.StringMessageModule.processesPerFrame">
            <summary>
            每帧处理消息个数
            </summary>
        </member>
        <member name="M:IFramework.Message.StringMessageModule.Subscribe(System.String,IFramework.Message.IMessageListener)">
            <summary>
            注册监听
            </summary>
            <param name="type"></param>
            <param name="listener"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Message.StringMessageModule.UnSubscribe(System.String,IFramework.Message.IMessageListener)">
            <summary>
            解除注册监听
            </summary>
            <param name="type"></param>
            <param name="listener"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Message.StringMessageModule.Subscribe(System.String,IFramework.Message.MessageListener)">
            <summary>
            注册监听
            </summary>
            <param name="type"></param>
            <param name="listener"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Message.StringMessageModule.UnSubscribe(System.String,IFramework.Message.MessageListener)">
            <summary>
            解除注册监听
            </summary>
            <param name="type"></param>
            <param name="listener"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Message.StringMessageModule.Publish(System.String,IFramework.IEventArgs,System.Int32,IFramework.Message.MessageUrgencyType)">
            <summary>
            发布消息
            </summary>
            <param name="type"></param>
            <param name="args"></param>
            <param name="code"></param>
            <param name="priority"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Message.StringMessageModule.PublishByNumber(System.String,IFramework.IEventArgs,System.Int32,System.Int32)">
            <summary>
            发布消息
            </summary>
            <param name="type"></param>
            <param name="args"></param>
            <param name="code"></param>
            <param name="priority">越大处理越晚</param>
            <returns></returns>
        </member>
        <member name="T:IFramework.Message.MessageState">
            <summary>
            消息状态
            </summary>
        </member>
        <member name="F:IFramework.Message.MessageState.Rest">
            <summary>
            休息
            </summary>
        </member>
        <member name="F:IFramework.Message.MessageState.Wait">
            <summary>
            等待被发布
            </summary>
        </member>
        <member name="F:IFramework.Message.MessageState.Lock">
            <summary>
            正在发布中
            </summary>
        </member>
        <member name="T:IFramework.Message.IMessageListener">
            <summary>
            消息监听者
            </summary>
        </member>
        <member name="M:IFramework.Message.IMessageListener.Listen(IFramework.Message.IMessage)">
            <summary>
            收到消息回调
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:IFramework.Message.IMessageModule">
            <summary>
            消息模块
            </summary>
        </member>
        <member name="P:IFramework.Message.IMessageModule.count">
            <summary>
            剩余消息数目
            </summary>
        </member>
        <member name="P:IFramework.Message.IMessageModule.fitSubType">
            <summary>
            适配子类型
            </summary>
        </member>
        <member name="P:IFramework.Message.IMessageModule.processesPerFrame">
            <summary>
            每一帧处理消息上限
            </summary>
        </member>
        <member name="M:IFramework.Message.IMessageModule.Publish(System.Type,IFramework.IEventArgs,System.Int32,IFramework.Message.MessageUrgencyType)">
            <summary>
            发布消息
            </summary>
            <param name="type"></param>
            <param name="args"></param>
            <param name="code"></param>
            <param name="priority"></param>
        </member>
        <member name="M:IFramework.Message.IMessageModule.Publish``1(IFramework.IEventArgs,System.Int32,IFramework.Message.MessageUrgencyType)">
            <summary>
            发布消息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="args"></param>
            <param name="code"></param>
            <param name="priority"></param>
        </member>
        <member name="M:IFramework.Message.IMessageModule.Publish``1(``0,IFramework.IEventArgs,System.Int32,IFramework.Message.MessageUrgencyType)">
            <summary>
            发布消息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <param name="args"></param>
            <param name="code"></param>
            <param name="priority"></param>
        </member>
        <member name="M:IFramework.Message.IMessageModule.PublishByNumber``1(``0,IFramework.IEventArgs,System.Int32,System.Int32)">
            <summary>
            发布消息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <param name="args"></param>
            <param name="code"></param>
            <param name="priority"></param>
        </member>
        <member name="M:IFramework.Message.IMessageModule.PublishByNumber``1(IFramework.IEventArgs,System.Int32,System.Int32)">
            <summary>
            发布消息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="args"></param>
            <param name="code"></param>
            <param name="priority"></param>
        </member>
        <member name="M:IFramework.Message.IMessageModule.PublishByNumber(System.Type,IFramework.IEventArgs,System.Int32,System.Int32)">
            <summary>
            发布消息
            </summary>
            <param name="type"></param>
            <param name="args"></param>
            <param name="code"></param>
            <param name="priority"></param>
        </member>
        <member name="M:IFramework.Message.IMessageModule.Subscribe(System.Type,IFramework.Message.IMessageListener)">
            <summary>
            注册
            </summary>
            <param name="type"></param>
            <param name="listener"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Message.IMessageModule.Subscribe(System.Type,IFramework.Message.MessageListener)">
            <summary>
            注册
            </summary>
            <param name="type"></param>
            <param name="listener"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Message.IMessageModule.Subscribe``1(IFramework.Message.IMessageListener)">
            <summary>
            注册
            </summary>
            <typeparam name="T"></typeparam>
            <param name="listener"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Message.IMessageModule.Subscribe``1(IFramework.Message.MessageListener)">
            <summary>
            注册
            </summary>
            <typeparam name="T"></typeparam>
            <param name="listener"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Message.IMessageModule.UnSubscribe(System.Type,IFramework.Message.IMessageListener)">
            <summary>
            移除
            </summary>
            <param name="type"></param>
            <param name="listener"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Message.IMessageModule.UnSubscribe(System.Type,IFramework.Message.MessageListener)">
            <summary>
            移除
            </summary>
            <param name="type"></param>
            <param name="listener"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Message.IMessageModule.UnSubscribe``1(IFramework.Message.IMessageListener)">
            <summary>
            移除
            </summary>
            <typeparam name="T"></typeparam>
            <param name="listener"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Message.IMessageModule.UnSubscribe``1(IFramework.Message.MessageListener)">
            <summary>
            移除
            </summary>
            <typeparam name="T"></typeparam>
            <param name="listener"></param>
            <returns></returns>
        </member>
        <member name="T:IFramework.Message.MessageListener">
            <summary>
            消息监听
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:IFramework.Message.MessageUrgency">
            <summary>
            消息紧急程度
            </summary>
        </member>
        <member name="F:IFramework.Message.MessageUrgency.Immediately">
            <summary>
            立刻
            </summary>
        </member>
        <member name="F:IFramework.Message.MessageUrgency.VeryUrgent">
            <summary>
            非常紧急
            </summary>
        </member>
        <member name="F:IFramework.Message.MessageUrgency.Urgent">
            <summary>
            紧急
            </summary>
        </member>
        <member name="F:IFramework.Message.MessageUrgency.Important">
            <summary>
            重要的
            </summary>
        </member>
        <member name="F:IFramework.Message.MessageUrgency.Common">
            <summary>
            普通的
            </summary>
        </member>
        <member name="F:IFramework.Message.MessageUrgency.Unimportant">
            <summary>
            不重要的
            </summary>
        </member>
        <member name="F:IFramework.Message.MessageUrgency.Dispensable">
            <summary>
            可有可无的
            </summary>
        </member>
        <member name="T:IFramework.Message.MessageUrgencyType">
            <summary>
            消息紧急程度
            </summary>
        </member>
        <member name="F:IFramework.Message.MessageUrgencyType.Immediately">
            <summary>
            立刻
            </summary>
        </member>
        <member name="F:IFramework.Message.MessageUrgencyType.VeryUrgent">
            <summary>
            非常紧急
            </summary>
        </member>
        <member name="F:IFramework.Message.MessageUrgencyType.Urgent">
            <summary>
            紧急
            </summary>
        </member>
        <member name="F:IFramework.Message.MessageUrgencyType.Important">
            <summary>
            重要的
            </summary>
        </member>
        <member name="F:IFramework.Message.MessageUrgencyType.Common">
            <summary>
            普通的
            </summary>
        </member>
        <member name="F:IFramework.Message.MessageUrgencyType.Unimportant">
            <summary>
            不重要的
            </summary>
        </member>
        <member name="F:IFramework.Message.MessageUrgencyType.Dispensable">
            <summary>
            可有可无的
            </summary>
        </member>
        <member name="T:IFramework.ModulePriority">
            <summary>
            默认的模块的优先级
            </summary>
        </member>
        <member name="F:IFramework.ModulePriority.Config">
            <summary>
            配置表
            </summary>
        </member>
        <member name="F:IFramework.ModulePriority.Loom">
            <summary>
            环境等待
            </summary>
        </member>
        <member name="F:IFramework.ModulePriority.Recorder">
            <summary>
            undo
            </summary>
        </member>
        <member name="F:IFramework.ModulePriority.Coroutine">
            <summary>
            协程
            </summary>
        </member>
        <member name="F:IFramework.ModulePriority.Message">
            <summary>
            消息转发
            </summary>
        </member>
        <member name="F:IFramework.ModulePriority.ECS">
            <summary>
            ecs
            </summary>
        </member>
        <member name="F:IFramework.ModulePriority.FSM">
            <summary>
            fsm
            </summary>
        </member>
        <member name="F:IFramework.ModulePriority.Timer">
            <summary>
            计时器
            </summary>
        </member>
        <member name="F:IFramework.ModulePriority.Custom">
            <summary>
            其他
            </summary>
        </member>
        <member name="M:IFramework.ModulePriority.#ctor(System.Int32)">
            <summary>
            ctor
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:IFramework.ModulePriority.value">
            <summary>
            具体的值
            </summary>
        </member>
        <member name="M:IFramework.ModulePriority.FromValue(System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.ModulePriority.op_Implicit(IFramework.ModulePriority)~System.Int32">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:IFramework.ModulePriority.op_Implicit(System.Int32)~IFramework.ModulePriority">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:IFramework.ModulePriority.op_Addition(IFramework.ModulePriority,IFramework.ModulePriority)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.ModulePriority.op_Subtraction(IFramework.ModulePriority,IFramework.ModulePriority)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:IFramework.Recorder.OperationRecorderEx">
            <summary>
            扩展
            </summary>
        </member>
        <member name="M:IFramework.Recorder.OperationRecorderEx.AllocateCommand(IFramework.Recorder.IOperationRecorderModule)">
            <summary>
            分配命令
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Recorder.OperationRecorderEx.AllocateAction(IFramework.Recorder.IOperationRecorderModule)">
            <summary>
            分配回调
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Recorder.OperationRecorderEx.AllocateCommandGroup(IFramework.Recorder.IOperationRecorderModule)">
            <summary>
            分配命令组
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Recorder.OperationRecorderEx.AllocateActionGroup(IFramework.Recorder.IOperationRecorderModule)">
            <summary>
            分配回调组
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Recorder.OperationRecorderEx.SetCommand``1(``0,IFramework.ICommand,IFramework.ICommand)">
            <summary>
            设置值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <param name="redo"></param>
            <param name="undo"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Recorder.OperationRecorderEx.SetGroupCommand``1(``0,IFramework.ICommand,IFramework.ICommand)">
            <summary>
            设置值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <param name="redo"></param>
            <param name="undo"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Recorder.OperationRecorderEx.SetCommand``1(``0,System.Action,System.Action)">
            <summary>
            设置值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <param name="redo"></param>
            <param name="undo"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Recorder.OperationRecorderEx.SetGroupCommand``1(``0,System.Action,System.Action)">
            <summary>
            设置值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <param name="redo"></param>
            <param name="undo"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Recorder.OperationRecorderEx.Subscribe``1(``0,System.Boolean)">
            <summary>
            注册
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <param name="redo"></param>
            <returns></returns>
        </member>
        <member name="T:IFramework.Recorder.OperationRecorderModule">
            <summary>
            操作记录
            </summary>
        </member>
        <member name="M:IFramework.Recorder.OperationRecorderModule.Allocate``1">
            <summary>
            分配状态
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:IFramework.Recorder.OperationRecorderModule.Subscribe(IFramework.Recorder.BaseState,System.Boolean)">
            <summary>
            注册
            </summary>
            <param name="state"></param>
            <param name="redo"></param>
        </member>
        <member name="M:IFramework.Recorder.OperationRecorderModule.GetRecordNames(System.Int32@)">
            <summary>
            获取记录列表
            </summary>
            <param name="index">当前记录的位置</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Recorder.OperationRecorderModule.Undo">
            <summary>
            撤回
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFramework.Recorder.OperationRecorderModule.Redo">
            <summary>
            执行
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFramework.Recorder.OperationRecorderModule.GetCurrentRecordName">
            <summary>
            获取当前节点的名字
            </summary>
            <returns></returns>
        </member>
        <member name="T:IFramework.Recorder.ActionGroupState">
            <summary>
            回调组
            </summary>
        </member>
        <member name="M:IFramework.Recorder.ActionGroupState.OnRedo">
            <summary>
            执行
            </summary>
        </member>
        <member name="M:IFramework.Recorder.ActionGroupState.OnUndo">
            <summary>
            撤回
            </summary>
        </member>
        <member name="M:IFramework.Recorder.ActionGroupState.OnReset">
            <summary>
            重置数据
            </summary>
        </member>
        <member name="M:IFramework.Recorder.ActionGroupState.Clone">
            <summary>
            赋值
            </summary>
            <returns></returns>
        </member>
        <member name="T:IFramework.Recorder.ActionState">
            <summary>
            回调状态
            </summary>
        </member>
        <member name="M:IFramework.Recorder.ActionState.OnRedo">
            <summary>
            执行
            </summary>
        </member>
        <member name="M:IFramework.Recorder.ActionState.OnUndo">
            <summary>
            撤回
            </summary>
        </member>
        <member name="M:IFramework.Recorder.ActionState.OnReset">
            <summary>
            重置数据
            </summary>
        </member>
        <member name="M:IFramework.Recorder.ActionState.Clone">
            <summary>
            复制
            </summary>
            <returns></returns>
        </member>
        <member name="T:IFramework.Recorder.BaseState">
            <summary>
            状态基类
            </summary>
        </member>
        <member name="F:IFramework.Recorder.BaseState._id">
            <summary>
            id
            </summary>
        </member>
        <member name="P:IFramework.Recorder.BaseState.guid">
            <summary>
            id
            </summary>
        </member>
        <member name="P:IFramework.Recorder.BaseState.name">
            <summary>
            名字
            </summary>
        </member>
        <member name="M:IFramework.Recorder.BaseState.OnRedo">
            <summary>
            执行
            </summary>
        </member>
        <member name="M:IFramework.Recorder.BaseState.OnUndo">
            <summary>
            撤回
            </summary>
        </member>
        <member name="M:IFramework.Recorder.BaseState.OnReset">
            <summary>
            重置数据
            </summary>
        </member>
        <member name="M:IFramework.Recorder.BaseState.Clone">
            <summary>
            复制
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFramework.Recorder.BaseState.SetName(System.String)">
            <summary>
            设置名字
            </summary>
            <param name="name">名字</param>
        </member>
        <member name="T:IFramework.Recorder.CommandGroupState">
            <summary>
            命令组
            </summary>
        </member>
        <member name="M:IFramework.Recorder.CommandGroupState.OnRedo">
            <summary>
            执行
            </summary>
        </member>
        <member name="M:IFramework.Recorder.CommandGroupState.OnUndo">
            <summary>
            撤回
            </summary>
        </member>
        <member name="M:IFramework.Recorder.CommandGroupState.OnReset">
            <summary>
            重置数据
            </summary>
        </member>
        <member name="M:IFramework.Recorder.CommandGroupState.Clone">
            <summary>
            复制
            </summary>
            <returns></returns>
        </member>
        <member name="T:IFramework.Recorder.CommandState">
            <summary>
            命令状态
            </summary>
        </member>
        <member name="M:IFramework.Recorder.CommandState.OnRedo">
            <summary>
            执行
            </summary>
        </member>
        <member name="M:IFramework.Recorder.CommandState.OnUndo">
            <summary>
            撤回
            </summary>
        </member>
        <member name="M:IFramework.Recorder.CommandState.OnReset">
            <summary>
            重置数据
            </summary>
        </member>
        <member name="T:IFramework.Recorder.IOperationRecorderModule">
            <summary>
            操作记录
            </summary>
        </member>
        <member name="M:IFramework.Recorder.IOperationRecorderModule.Allocate``1">
            <summary>
            分配
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:IFramework.Recorder.IOperationRecorderModule.Redo">
            <summary>
            执行
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFramework.Recorder.IOperationRecorderModule.Subscribe(IFramework.Recorder.BaseState,System.Boolean)">
            <summary>
            注册
            </summary>
            <param name="state"></param>
            <param name="redo"></param>
        </member>
        <member name="M:IFramework.Recorder.IOperationRecorderModule.Undo">
            <summary>
            撤回
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFramework.Recorder.IOperationRecorderModule.GetRecordNames(System.Int32@)">
            <summary>
            获取记录列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFramework.Recorder.IOperationRecorderModule.GetCurrentRecordName">
            <summary>
            获取当前节点的名字
            </summary>
            <returns></returns>
        </member>
        <member name="T:IFramework.Timer.InnerType">
            <summary>
            当前时间的状态
            </summary>
        </member>
        <member name="F:IFramework.Timer.InnerType.Parallel">
            <summary>
            串行
            </summary>
        </member>
        <member name="F:IFramework.Timer.InnerType.Serial">
            <summary>
            并行
            </summary>
        </member>
        <member name="T:IFramework.Timer.TimerEntity">
            <summary>
            定时方法元素
            </summary>
        </member>
        <member name="M:IFramework.Timer.TimerEntity.Reset">
            <summary>
            重置
            </summary>
        </member>
        <member name="P:IFramework.Timer.TimerEntity.repeatDelay">
            <summary>
            循环等待时间
            </summary>
        </member>
        <member name="P:IFramework.Timer.TimerEntity.delay">
            <summary>
            开始等待时间
            </summary>
        </member>
        <member name="P:IFramework.Timer.TimerEntity.repeat">
            <summary>
            执行次数
            </summary>
        </member>
        <member name="P:IFramework.Timer.TimerEntity.timeScale">
            <summary>
            时间比例
            </summary>
        </member>
        <member name="P:IFramework.Timer.TimerEntity.state">
            <summary>
            当前状态
            </summary>
        </member>
        <member name="M:IFramework.Timer.TimerEntity.SubscribeStart(System.Action)">
            <summary>
            注册开始调用的回调方法
            </summary>
            <param name="startAction">回调方法</param>
        </member>
        <member name="M:IFramework.Timer.TimerEntity.UnSubscribeStart(System.Action)">
            <summary>
            解绑开始调用的回调方法
            </summary>
            <param name="startAction">回调方法</param>
        </member>
        <member name="M:IFramework.Timer.TimerEntity.SubsribeUpdate(System.Action)">
            <summary>
            注册每帧的回调方法
            </summary>
            <param name="updateAction">回调方法</param>
        </member>
        <member name="M:IFramework.Timer.TimerEntity.UnSubsribeUpdate(System.Action)">
            <summary>
            解绑每帧的回调方法
            </summary>
            <param name="updateAction">回调方法</param>
        </member>
        <member name="M:IFramework.Timer.TimerEntity.SubscribeComplete(System.Action)">
            <summary>
            注册完成的回调方法
            </summary>
            <param name="completeAction">回调函数</param>
        </member>
        <member name="M:IFramework.Timer.TimerEntity.UnSubscribeComplete(System.Action)">
            <summary>
            解绑完成的回调方法
            </summary>
            <param name="completeAction">回调函数</param>
        </member>
        <member name="M:IFramework.Timer.TimerEntity.Cancel(System.Boolean)">
            <summary>
            取消
            </summary>
        </member>
        <member name="M:IFramework.Timer.TimerEntity.Pause">
            <summary>
            暂停
            </summary>
        </member>
        <member name="M:IFramework.Timer.TimerEntity.Start">
            <summary>
            继续/开始计时
            </summary>
        </member>
        <member name="M:IFramework.Timer.TimerEntity.Do">
            <summary>
            调用一次
            </summary>
        </member>
        <member name="M:IFramework.Timer.TimerEntity.Update(System.Single)">
            <summary>
            刷新时间
            </summary>
        </member>
        <member name="M:IFramework.Timer.TimerEntity.SetInnerTimer(IFramework.Timer.ITimerEntity,IFramework.Timer.InnerType)">
            <summary>
            设置子定时器静态扩展
            </summary>
            <param name="timerEntity">子定时器</param>
            <param name="type">子定时器类型</param>
        </member>
        <member name="M:IFramework.Timer.TimerEntity.Subscribe">
            <summary>
            注册静态扩展
            </summary>
        </member>
        <member name="M:IFramework.Timer.TimerEntity.SetTimeScale(System.Single)">
            <summary>
            设置TimeScale
            </summary>
        </member>
        <member name="T:IFramework.Timer.ITimerEntity">
            <summary>
            TimeEntity接口
            </summary>
        </member>
        <member name="P:IFramework.Timer.ITimerEntity.repeatDelay">
            <summary>
            每次调用的等待时间
            </summary>
        </member>
        <member name="P:IFramework.Timer.ITimerEntity.delay">
            <summary>
            开始调用的等待时间
            </summary>
        </member>
        <member name="P:IFramework.Timer.ITimerEntity.repeat">
            <summary>
            执行次数
            </summary>
        </member>
        <member name="P:IFramework.Timer.ITimerEntity.timeScale">
            <summary>
            时间比例
            </summary>
        </member>
        <member name="P:IFramework.Timer.ITimerEntity.state">
            <summary>
            状态
            </summary>
        </member>
        <member name="M:IFramework.Timer.ITimerEntity.Start">
            <summary>
            继续
            </summary>
        </member>
        <member name="M:IFramework.Timer.ITimerEntity.Pause">
            <summary>
            暂停
            </summary>
        </member>
        <member name="M:IFramework.Timer.ITimerEntity.Cancel(System.Boolean)">
            <summary>
            取消
            </summary>
        </member>
        <member name="M:IFramework.Timer.ITimerEntity.SetInnerTimer(IFramework.Timer.ITimerEntity,IFramework.Timer.InnerType)">
            <summary>
            设置子定时器
            </summary>
            <param name="timerEntity">子定时器</param>
            <param name="type">子定时器类型</param>
        </member>
        <member name="M:IFramework.Timer.ITimerEntity.Subscribe">
            <summary>
            注册
            </summary>
        </member>
        <member name="M:IFramework.Timer.ITimerEntity.SetTimeScale(System.Single)">
            <summary>
            设置时间比例
            </summary>
        </member>
        <member name="M:IFramework.Timer.ITimerEntity.SubscribeStart(System.Action)">
            <summary>
            注册开始调用的回调方法
            </summary>
            <param name="startAction">回调方法</param>
        </member>
        <member name="M:IFramework.Timer.ITimerEntity.UnSubscribeStart(System.Action)">
            <summary>
            解绑开始调用的回调方法
            </summary>
            <param name="startAction">回调方法</param>
        </member>
        <member name="M:IFramework.Timer.ITimerEntity.SubsribeUpdate(System.Action)">
            <summary>
            注册每帧的回调方法
            </summary>
            <param name="updateAction">回调方法</param>
        </member>
        <member name="M:IFramework.Timer.ITimerEntity.UnSubsribeUpdate(System.Action)">
            <summary>
            解绑每帧的回调方法
            </summary>
            <param name="updateAction">回调方法</param>
        </member>
        <member name="M:IFramework.Timer.ITimerEntity.SubscribeComplete(System.Action)">
            <summary>
            注册完成的回调方法
            </summary>
            <param name="completeAction">回调函数</param>
        </member>
        <member name="M:IFramework.Timer.ITimerEntity.UnSubscribeComplete(System.Action)">
            <summary>
            解绑完成的回调方法
            </summary>
            <param name="completeAction">回调函数</param>
        </member>
        <member name="T:IFramework.Timer.EntityState">
            <summary>
            当前时间的状态
            </summary>
        </member>
        <member name="F:IFramework.Timer.EntityState.NotStart">
            <summary>
            未开始
            </summary>
        </member>
        <member name="F:IFramework.Timer.EntityState.Waiting">
            <summary>
            正在等待
            </summary>
        </member>
        <member name="F:IFramework.Timer.EntityState.Running">
            <summary>
            正在执行
            </summary>
        </member>
        <member name="F:IFramework.Timer.EntityState.Pause">
            <summary>
            暂停
            </summary>
        </member>
        <member name="F:IFramework.Timer.EntityState.Done">
            <summary>
            完成
            </summary>
        </member>
        <member name="F:IFramework.Timer.EntityState.None">
            <summary>
            无状态(默认状态)
            </summary>
        </member>
        <member name="T:IFramework.Timer.ITimerModule">
            <summary>
            计时器
            </summary>
        </member>
        <member name="M:IFramework.Timer.ITimerModule.Subscribe(IFramework.Timer.ITimerEntity)">
            <summary>
            注册方法
            </summary>
            <param name="actionItem"></param>
        </member>
        <member name="M:IFramework.Timer.ITimerModule.Clear">
            <summary>
            清除所有定时方法
            </summary>
        </member>
        <member name="M:IFramework.Timer.ITimerModule.Allocate(System.Action,System.Single,System.Int32,System.Single,System.Single)">
            <summary>
            分配
            </summary>
            <returns></returns>
        </member>
        <member name="T:IFramework.Timer.TimerModule">
            <summary>
            时间模块
            </summary>
        </member>
        <member name="M:IFramework.Timer.TimerModule.OnGetDefautPriority">
            <summary>
            优先级
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFramework.Timer.TimerModule.Clear">
            <summary>
            清除方法
            </summary>
        </member>
        <member name="M:IFramework.Timer.TimerModule.Subscribe(IFramework.Timer.ITimerEntity)">
            <summary>
            注册定时方法
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:IFramework.Timer.TimerModule.Awake">
            <summary>
            awake
            </summary>
        </member>
        <member name="M:IFramework.Timer.TimerModule.OnDispose">
            <summary>
            dispose
            </summary>
        </member>
        <member name="M:IFramework.Timer.TimerModule.OnUpdate">
            <summary>
            update
            </summary>
        </member>
        <member name="M:IFramework.Timer.TimerModule.Allocate(System.Action,System.Single,System.Int32,System.Single,System.Single)">
            <summary>
             全局分配
            </summary>
            <param name="action">调用的方法</param>
            <param name="repeatDelay">延迟时间</param>
            <param name="repeat">执行次数</param>
            <param name="delay">开始定时器的等待时间</param>
            <param name="timeScale">时间比例</param>
            <returns>获取的TimerEntity</returns>
        </member>
        <member name="M:IFramework.Ex.ExistFile(System.String)">
            <summary>
            是否存在文件
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Ex.IsDirectory(System.String)">
            <summary>
            是否是一个文件夹
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Ex.RemoveEmptyDirectory(System.String)">
            <summary>
            移除空文件夹
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Ex.CombinePath(System.String,System.String)">
            <summary>
            拼接路径
            </summary>
            <param name="path"></param>
            <param name="toCombinePath"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Ex.CombinePath(System.String,System.String[])">
            <summary>
            拼接路径
            </summary>
            <param name="path"></param>
            <param name="paths"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Ex.ToRegularPath(System.String)">
            <summary>
            规范路径
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Ex.MakeDirectoryExist(System.String)">
            <summary>
            如果文件夹不存在则创建
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:IFramework.Ex.GetSubTypesInAssembly(System.Type)">
            <summary>
            获取当前程序集中的类型的子类，3.5有问题
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Ex.GetSubTypesInAssemblys(System.Type)">
            <summary>
            获取所有程序集中的类型的子类，3.5有问题
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Ex.IsExtendInterface(System.Type,System.Type)">
            <summary>
            是否继承接口
            </summary>
            <param name="self"></param>
            <param name="Interface"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Ex.IsSubclassOfGeneric(System.Type,System.Type)">
            <summary>
            是否继承自泛型类
            </summary>
            <param name="self"></param>
            <param name="genericType"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Ex.GetTypeTree(System.Type)">
            <summary>
            获取类型树
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Ex.GetExtensionMethods(System.Type,System.Reflection.Assembly)">
            <summary>
            获取程序集下的静态扩展
            </summary>
            <param name="self"></param>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Ex.ToUnixLineEndings(System.String)">
            <summary>
            字符串结尾转Unix编码
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Ex.AppendHead(System.String,System.String)">
            <summary>
            在字符串前拼接字符串
            </summary>
            <param name="self"></param>
            <param name="toPrefix"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Ex.Append(System.String,System.String)">
            <summary>
            拼接字符串
            </summary>
            <param name="self"></param>
            <param name="toAppend"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Ex.Append(System.String,System.String[])">
            <summary>
            拼接字符串
            </summary>
            <param name="self"></param>
            <param name="toAppend"></param>
            <returns></returns>
        </member>
        <member name="T:IFramework.ArrayPoolArg">
            <summary>
            ArrayPoolArg
            </summary>
        </member>
        <member name="F:IFramework.ArrayPoolArg.length">
            <summary>
            长度
            </summary>
        </member>
        <member name="M:IFramework.ArrayPoolArg.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="length"></param>
        </member>
        <member name="T:IFramework.ArrayPool`1">
            <summary>
            数组
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:IFramework.ArrayPool`1.CreateNew(IFramework.IEventArgs)">
            <summary>
            创建
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.ArrayPool`1.Get(IFramework.IEventArgs)">
            <summary>
            获取
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.ArrayPool`1.Set(`0[],IFramework.IEventArgs)">
            <summary>
            回收
            </summary>
            <param name="t"></param>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.ArrayPool`1.OnDispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="T:IFramework.IObjectPool">
            <summary>
            对象池接口
            </summary>
        </member>
        <member name="P:IFramework.IObjectPool.count">
            <summary>
            数量
            </summary>
        </member>
        <member name="P:IFramework.IObjectPool.type">
            <summary>
            类型
            </summary>
        </member>
        <member name="M:IFramework.IObjectPool.Set(System.Object,IFramework.IEventArgs)">
            <summary>
            回收
            </summary>
            <param name="obj"></param>
            <param name="args"></param>
        </member>
        <member name="T:IFramework.Serialization.DataTable.DataColumn">
            <summary>
            每一个格子
            </summary>
        </member>
        <member name="F:IFramework.Serialization.DataTable.DataColumn.headNameForRead">
            <summary>
            标题名称
            </summary>
        </member>
        <member name="F:IFramework.Serialization.DataTable.DataColumn.value">
            <summary>
            string 数据
            </summary>
        </member>
        <member name="T:IFramework.Serialization.DataTable.DataReadColumnIndexAttribute">
            <summary>
            数据列
            </summary>
        </member>
        <member name="P:IFramework.Serialization.DataTable.DataReadColumnIndexAttribute.index">
            <summary>
            所在列
            </summary>
        </member>
        <member name="M:IFramework.Serialization.DataTable.DataReadColumnIndexAttribute.#ctor(System.Int32)">
            <summary>
            ctor
            </summary>
            <param name="index"></param>
        </member>
        <member name="T:IFramework.Serialization.DataTable.DataColumnNameAttribute">
            <summary>
            设置数据表标题
            </summary>
        </member>
        <member name="M:IFramework.Serialization.DataTable.DataColumnNameAttribute.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="name">名称</param>
        </member>
        <member name="P:IFramework.Serialization.DataTable.DataColumnNameAttribute.name">
            <summary>
            名称
            </summary>
        </member>
        <member name="T:IFramework.Serialization.DataTable.DataIgnoreAttribute">
            <summary>
            数据表忽略的成员
            </summary>
        </member>
        <member name="T:IFramework.Serialization.DataTable.DataTableTool">
            <summary>
            DataTable
            </summary>
        </member>
        <member name="M:IFramework.Serialization.DataTable.DataTableTool.CreateReader(System.IO.TextReader,IFramework.Serialization.DataTable.IDataRow,IFramework.Serialization.DataTable.IDataExplainer)">
            <summary>
            创建数据读取器
            </summary>
            <param name="streamReader"></param>
            <param name="rowReader"></param>
            <param name="explainer"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Serialization.DataTable.DataTableTool.CreateReader(System.String,IFramework.Serialization.DataTable.IDataRow,IFramework.Serialization.DataTable.IDataExplainer)">
            <summary>
            创建数据读取器
            </summary>
            <param name="text"></param>
            <param name="rowReader"></param>
            <param name="explainer"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Serialization.DataTable.DataTableTool.CreateWriter(System.IO.TextWriter,IFramework.Serialization.DataTable.IDataRow,IFramework.Serialization.DataTable.IDataExplainer)">
            <summary>
            创建数据写入器
            </summary>
            <param name="streamWriter"></param>
            <param name="rowWriter"></param>
            <param name="explainer"></param>
            <returns></returns>
        </member>
        <member name="T:IFramework.Serialization.DataTable.DataExplainer">
            <summary>
            string 解释器
            </summary>
        </member>
        <member name="M:IFramework.Serialization.DataTable.DataExplainer.#ctor(System.Char,System.Char)">
            <summary>
            ctor
            </summary>
            <param name="dot">替换逗号的字符</param>
            <param name="quotes">替换双引号的字符</param>
        </member>
        <member name="M:IFramework.Serialization.DataTable.DataExplainer.CreatInstance(System.Type)">
            <summary>
            创建实例
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Serialization.DataTable.DataExplainer.CreatInstance``1(System.Collections.Generic.List{IFramework.Serialization.DataTable.DataColumn},System.Collections.Generic.Dictionary{System.Reflection.MemberInfo,System.String})">
            <summary>
            根据格子反序列化一个实例
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cols"></param>
            <param name="membersDic">需要反序列化的成员</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Serialization.DataTable.DataExplainer.GetColumns``1(``0,System.Collections.Generic.Dictionary{System.Reflection.MemberInfo,System.String})">
            <summary>
            根据 具体类型 获取单个数据格子数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <param name="membersDic">需要序列化的成员</param>
            <returns></returns>
        </member>
        <member name="T:IFramework.Serialization.DataTable.DataReader">
            <summary>
            数据表读者
            </summary>
        </member>
        <member name="M:IFramework.Serialization.DataTable.DataReader.#ctor(System.IO.TextReader,IFramework.Serialization.DataTable.IDataRow,IFramework.Serialization.DataTable.IDataExplainer)">
            <summary>
            Ctor
            </summary>
            <param name="streamReader">流读者</param>
            <param name="rowReader">行读者</param>
            <param name="explainer">数据解释器</param>
        </member>
        <member name="M:IFramework.Serialization.DataTable.DataReader.#ctor(System.String,IFramework.Serialization.DataTable.IDataRow,IFramework.Serialization.DataTable.IDataExplainer)">
            <summary>
            Ctor
            </summary>
            <param name="text">数据表字符串</param>
            <param name="rowReader">行读者</param>
            <param name="explainer">数据解释器</param>
        </member>
        <member name="M:IFramework.Serialization.DataTable.DataReader.OnDispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="M:IFramework.Serialization.DataTable.DataReader.Get``1">
            <summary>
            获取一张表数据
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:IFramework.Serialization.DataTable.DataRow">
            <summary>
            数据行
            </summary>
        </member>
        <member name="M:IFramework.Serialization.DataTable.DataRow.ReadLine(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            读取一行
            </summary>
            <param name="val">行String</param>
            <param name="headNames">标题行</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Serialization.DataTable.DataRow.SpilitRow(System.String)">
            <summary>
            切割一行
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Serialization.DataTable.DataRow.ReadHeadLine(System.String)">
            <summary>
            读取标题行
            </summary>
            <param name="val">行String</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Serialization.DataTable.DataRow.WriteLine(System.Collections.Generic.List{IFramework.Serialization.DataTable.DataColumn},System.Text.StringBuilder)">
            <summary>
            写入一行
            </summary>
            <param name="cols">写入的信息</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Serialization.DataTable.DataRow.WriteHeadLine(System.Collections.Generic.List{System.String},System.Text.StringBuilder)">
            <summary>
            写入标题行
            </summary>
            <param name="headNames">写入的标题</param>
            <returns></returns>
        </member>
        <member name="T:IFramework.Serialization.DataTable.DataWriter">
            <summary>
            数据写入者
            </summary>
        </member>
        <member name="M:IFramework.Serialization.DataTable.DataWriter.#ctor(System.IO.TextWriter,IFramework.Serialization.DataTable.IDataRow,IFramework.Serialization.DataTable.IDataExplainer)">
            <summary>
            Ctor
            </summary>
            <param name="streamWriter">流写者</param>
            <param name="rowWriter">行写者</param>
            <param name="explainer">数据解释器</param>
        </member>
        <member name="M:IFramework.Serialization.DataTable.DataWriter.#ctor(IFramework.Serialization.DataTable.IDataRow,IFramework.Serialization.DataTable.IDataExplainer)">
            <summary>
            Ctor
            </summary>
            <param name="rowWriter">行写者</param>
            <param name="explainer">数据解释器</param>
        </member>
        <member name="M:IFramework.Serialization.DataTable.DataWriter.OnDispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="M:IFramework.Serialization.DataTable.DataWriter.WriteString(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Collections.Generic.List{IFramework.Serialization.DataTable.DataColumn}})">
            <summary>
            写入到string
            </summary>
            <param name="headNames"></param>
            <param name="rows"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Serialization.DataTable.DataWriter.Write(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Collections.Generic.List{IFramework.Serialization.DataTable.DataColumn}})">
            <summary>
            写入文件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="headNames"></param>
            <param name="rows"></param>
        </member>
        <member name="M:IFramework.Serialization.DataTable.DataWriter.WriteString``1(System.Collections.Generic.List{``0})">
            <summary>
            写入到string
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">数据</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Serialization.DataTable.DataWriter.Write``1(System.Collections.Generic.List{``0})">
            <summary>
            写入一个表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
        </member>
        <member name="T:IFramework.Serialization.DataTable.IDataExplainer">
            <summary>
            string 解释器
            </summary>
        </member>
        <member name="M:IFramework.Serialization.DataTable.IDataExplainer.CreatInstance``1(System.Collections.Generic.List{IFramework.Serialization.DataTable.DataColumn},System.Collections.Generic.Dictionary{System.Reflection.MemberInfo,System.String})">
            <summary>
            根据格子反序列化一个实例
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cols"></param>
            <param name="membersDic">需要反序列化的成员</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Serialization.DataTable.IDataExplainer.GetColumns``1(``0,System.Collections.Generic.Dictionary{System.Reflection.MemberInfo,System.String})">
            <summary>
            根据 具体类型 获取单个数据格子数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <param name="membersDic">需要序列化的成员</param>
            <returns></returns>
        </member>
        <member name="T:IFramework.Serialization.DataTable.IDataReader">
            <summary>
            数据读取器
            </summary>
        </member>
        <member name="M:IFramework.Serialization.DataTable.IDataReader.Get``1">
            <summary>
            获取
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:IFramework.Serialization.DataTable.IDataReader.headNames">
            <summary>
            标题栏
            </summary>
        </member>
        <member name="P:IFramework.Serialization.DataTable.IDataReader.rows">
            <summary>
            行
            </summary>
        </member>
        <member name="T:IFramework.Serialization.DataTable.IDataRow">
            <summary>
            数据行
            </summary>
        </member>
        <member name="M:IFramework.Serialization.DataTable.IDataRow.ReadLine(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            读取一行
            </summary>
            <param name="val">行String</param>
            <param name="headNames">标题行</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Serialization.DataTable.IDataRow.ReadHeadLine(System.String)">
            <summary>
            读取标题行
            </summary>
            <param name="val">行String</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Serialization.DataTable.IDataRow.WriteLine(System.Collections.Generic.List{IFramework.Serialization.DataTable.DataColumn},System.Text.StringBuilder)">
            <summary>
            写入一行
            </summary>
            <param name="cols">写入的信息</param>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Serialization.DataTable.IDataRow.WriteHeadLine(System.Collections.Generic.List{System.String},System.Text.StringBuilder)">
            <summary>
            写入标题行
            </summary>
            <param name="headNames">写入的标题</param>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="T:IFramework.Serialization.DataTable.IDataWriter">
            <summary>
            数据写入器
            </summary>
        </member>
        <member name="M:IFramework.Serialization.DataTable.IDataWriter.Write``1(System.Collections.Generic.List{``0})">
            <summary>
            写入
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
        </member>
        <member name="M:IFramework.Serialization.DataTable.IDataWriter.WriteString``1(System.Collections.Generic.List{``0})">
            <summary>
            写入文件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Serialization.DataTable.IDataWriter.WriteString(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Collections.Generic.List{IFramework.Serialization.DataTable.DataColumn}})">
            <summary>
            写入
            </summary>
            <param name="headNames"></param>
            <param name="rows"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Serialization.DataTable.IDataWriter.Write(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Collections.Generic.List{IFramework.Serialization.DataTable.DataColumn}})">
            <summary>
            写入文件
            </summary>
            <param name="headNames"></param>
            <param name="rows"></param>
            <returns></returns>
        </member>
        <member name="T:IFramework.Unit">
            <summary>
            基类
            </summary>
        </member>
        <member name="P:IFramework.Unit.disposed">
            <summary>
            是否已经释放
            </summary>
        </member>
        <member name="M:IFramework.Unit.OnDispose">
            <summary>
            释放时
            </summary>
        </member>
        <member name="M:IFramework.Unit.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="T:IFramework.IBelongToEnvironment">
            <summary>
            属于环境
            </summary>
        </member>
        <member name="P:IFramework.IBelongToEnvironment.env">
            <summary>
            环境
            </summary>
        </member>
        <member name="T:IFramework.IContainer">
            <summary>
            容器
            </summary>
        </member>
        <member name="T:IFramework.IAwaitable`1">
            <summary>
            表示一个可等待对象，如果一个方法返回此类型的实例，则此方法可以使用 `await` 异步等待。
            </summary>
            <typeparam name="TAwaiter">用于给 await 确定返回时机的 IAwaiter 的实例。</typeparam>
        </member>
        <member name="M:IFramework.IAwaitable`1.GetAwaiter">
            <summary>
            获取一个可用于 await 关键字异步等待的异步等待对象。
            此方法会被编译器自动调用。
            </summary>
        </member>
        <member name="T:IFramework.IAwaitable`2">
            <summary>
            表示一个包含返回值的可等待对象，如果一个方法返回此类型的实例，则此方法可以使用 `await` 异步等待返回值。
            </summary>
            <typeparam name="TAwaiter">用于给 await 确定返回时机的 IAwaiter{<typeparamref name="TResult"/>} 的实例。</typeparam>
            <typeparam name="TResult">异步返回的返回值类型。</typeparam>
        </member>
        <member name="M:IFramework.IAwaitable`2.GetAwaiter">
            <summary>
            获取一个可用于 await 关键字异步等待的异步等待对象。
            此方法会被编译器自动调用。
            </summary>
        </member>
        <member name="T:IFramework.IAwaiter">
            <summary>
            用于给 await 确定异步返回的时机。
            </summary>
        </member>
        <member name="P:IFramework.IAwaiter.IsCompleted">
            <summary>
            获取一个状态，该状态表示正在异步等待的操作已经完成（成功完成或发生了异常）；此状态会被编译器自动调用。
            在实现中，为了达到各种效果，可以灵活应用其值：可以始终为 true，或者始终为 false。
            </summary>
        </member>
        <member name="M:IFramework.IAwaiter.GetResult">
            <summary>
            此方法会被编译器在 await 结束时自动调用以获取返回状态（包括异常）。
            </summary>
        </member>
        <member name="T:IFramework.IAwaiter`1">
            <summary>
            用于给 await 确定异步返回的时机，并获取到返回值。
            </summary>
            <typeparam name="TResult">异步返回的返回值类型。</typeparam>
        </member>
        <member name="P:IFramework.IAwaiter`1.IsCompleted">
            <summary>
            获取一个状态，该状态表示正在异步等待的操作已经完成（成功完成或发生了异常）；此状态会被编译器自动调用。
            在实现中，为了达到各种效果，可以灵活应用其值：可以始终为 true，或者始终为 false。
            </summary>
        </member>
        <member name="M:IFramework.IAwaiter`1.GetResult">
            <summary>
            获取此异步等待操作的返回值，此方法会被编译器在 await 结束时自动调用以获取返回值（包括异常）。
            </summary>
            <returns>异步操作的返回值。</returns>
        </member>
        <member name="T:IFramework.ICriticalAwaiter">
            <summary>
            当执行关键代码（此代码中的错误可能给应用程序中的其他状态造成负面影响）时，
            用于给 await 确定异步返回的时机。
            </summary>
        </member>
        <member name="T:IFramework.ICriticalAwaiter`1">
            <summary>
            当执行关键代码（此代码中的错误可能给应用程序中的其他状态造成负面影响）时，
            用于给 await 确定异步返回的时机，并获取到返回值。
            </summary>
            <typeparam name="TResult">异步返回的返回值类型。</typeparam>
        </member>
        <member name="T:IFramework.IModel">
            <summary>
            模型
            </summary>
        </member>
        <member name="T:IFramework.IUniqueIDObject">
            <summary>
            唯一id
            </summary>
        </member>
        <member name="P:IFramework.IUniqueIDObject.guid">
            <summary>
            唯一id
            </summary>
        </member>
        <member name="T:IFramework.IUnit">
            <summary>
            积累接口
            </summary>
        </member>
        <member name="P:IFramework.IUnit.disposed">
            <summary>
            是否释放
            </summary>
        </member>
        <member name="T:IFramework.IValueContainer`1">
            <summary>
            数据容器
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:IFramework.IValueContainer`1.value">
            <summary>
            数据
            </summary>
        </member>
        <member name="T:IFramework.EnvironmentType">
            <summary>
            环境类型
            </summary>
        </member>
        <member name="F:IFramework.EnvironmentType.None">
            <summary>
            所有，配合环境初始化
            </summary>
        </member>
        <member name="F:IFramework.EnvironmentType.Ev0">
            <summary>
            环境0
            </summary>
        </member>
        <member name="F:IFramework.EnvironmentType.Ev1">
            <summary>
            环境1
            </summary>
        </member>
        <member name="F:IFramework.EnvironmentType.Ev2">
            <summary>
            环境2
            </summary>
        </member>
        <member name="F:IFramework.EnvironmentType.Ev3">
            <summary>
            环境3
            </summary>
        </member>
        <member name="F:IFramework.EnvironmentType.Ev4">
            <summary>
            环境4
            </summary>
        </member>
        <member name="F:IFramework.EnvironmentType.Ev5">
            <summary>
            环境5
            </summary>
        </member>
        <member name="F:IFramework.EnvironmentType.Ev6">
            <summary>
            环境6
            </summary>
        </member>
        <member name="F:IFramework.EnvironmentType.Ev7">
            <summary>
            环境7
            </summary>
        </member>
        <member name="F:IFramework.EnvironmentType.Ev8">
            <summary>
            环境8
            </summary>
        </member>
        <member name="F:IFramework.EnvironmentType.Ev9">
            <summary>
            环境9
            </summary>
        </member>
        <member name="F:IFramework.EnvironmentType.Ev10">
            <summary>
            环境10
            </summary>
        </member>
        <member name="F:IFramework.EnvironmentType.Ev11">
            <summary>
            
            </summary>
        </member>
        <member name="F:IFramework.EnvironmentType.Ev12">
            <summary>
            
            </summary>
        </member>
        <member name="F:IFramework.EnvironmentType.Extra0">
            <summary>
            额外的1
            </summary>
        </member>
        <member name="F:IFramework.EnvironmentType.Extra1">
            <summary>
            额外的1
            </summary>
        </member>
        <member name="F:IFramework.EnvironmentType.Extra2">
            <summary>
            额外的2
            </summary>
        </member>
        <member name="F:IFramework.EnvironmentType.Extra3">
            <summary>
            额外的3
            </summary>
        </member>
        <member name="F:IFramework.EnvironmentType.Extra4">
            <summary>
            额外的4
            </summary>
        </member>
        <member name="F:IFramework.EnvironmentType.Extra5">
            <summary>
            
            </summary>
        </member>
        <member name="T:IFramework.ICommand">
            <summary>
            命令
            </summary>
        </member>
        <member name="M:IFramework.ICommand.Excute">
            <summary>
            处理
            </summary>
        </member>
        <member name="T:IFramework.IRecyclable">
            <summary>
            可回收
            </summary>
        </member>
        <member name="P:IFramework.IRecyclable.recyled">
            <summary>
            是否被回收
            </summary>
        </member>
        <member name="M:IFramework.IRecyclable.Recyle">
            <summary>
            回收
            </summary>
        </member>
        <member name="T:IFramework.Environment">
            <summary>
            框架运行环境
            </summary>
        </member>
        <member name="P:IFramework.Environment.inited">
            <summary>
            环境是否已经初始化
            </summary>
        </member>
        <member name="P:IFramework.Environment.modules">
            <summary>
            环境下自带的模块容器
            </summary>
        </member>
        <member name="P:IFramework.Environment.envType">
            <summary>
            环境类型
            </summary>
        </member>
        <member name="P:IFramework.Environment.current">
            <summary>
            当前环境
            </summary>
        </member>
        <member name="M:IFramework.Environment.#ctor(IFramework.EnvironmentType)">
            <summary>
            ctor
            </summary>
            <param name="envType"></param>
        </member>
        <member name="M:IFramework.Environment.Init(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            初始化环境，3.5 使用
            </summary>
            <param name="types">需要初始化调用的静态类</param>
        </member>
        <member name="M:IFramework.Environment.InitWithAttribute">
            <summary>
            初始化环境，4.X 使用
            </summary>
        </member>
        <member name="M:IFramework.Environment.OnDispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="M:IFramework.Environment.Update">
            <summary>
            刷新环境
            </summary>
        </member>
        <member name="M:IFramework.Environment.WaitEnvironmentFrame``1(``0)">
            <summary>
            等待 环境的 update，即等到该环境的线程来临
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:IFramework.Environment.BindUpdate(System.Action)">
            <summary>
            绑定帧
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:IFramework.Environment.UnBindUpdate(System.Action)">
            <summary>
            移除绑定帧
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:IFramework.Environment.BindDispose(System.Action)">
            <summary>
            绑定dispose
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:IFramework.Environment.UnBindDispose(System.Action)">
            <summary>
            移除绑定dispose
            </summary>
            <param name="action"></param>
        </member>
        <member name="T:IFramework.Module">
            <summary>
            模块
            </summary>
        </member>
        <member name="F:IFramework.Module.defaultName">
            <summary>
            默认名字
            </summary>
        </member>
        <member name="M:IFramework.Module.#ctor">
            <summary>
            阻止 New
            </summary>
        </member>
        <member name="M:IFramework.Module.CreatInstance(System.Type,System.String,System.Int32)">
            <summary>
            创建实例
            </summary>
            <param name="type">模块类型</param>
            <param name="name">模块名称</param>
            <param name="priority"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Module.OnGetDefautPriority">
            <summary>
            设置优先级
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFramework.Module.CreatInstance``1(System.String,System.Int32)">
            <summary>
            创建实例
            </summary>
            <param name="name">模块名称</param>
            <param name="priority"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Module.Bind(IFramework.IModules)">
            <summary>
            绑定模块容器
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:IFramework.Module.UnBind(System.Boolean)">
            <summary>
            解除绑定模块容器
            </summary>
            <param name="dispose"></param>
        </member>
        <member name="P:IFramework.Module.priority">
            <summary>
            优先级（越大释放越早释放,越小越先 update）
            </summary>
        </member>
        <member name="P:IFramework.Module.binded">
            <summary>
            是否绑定了
            </summary>
        </member>
        <member name="P:IFramework.Module.container">
            <summary>
            模块所处的容器
            </summary>
        </member>
        <member name="P:IFramework.Module.name">
            <summary>
            名字
            </summary>
        </member>
        <member name="M:IFramework.Module.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="M:IFramework.Module.Awake">
            <summary>
            初始化
            </summary>
        </member>
        <member name="T:IFramework.Modules">
            <summary>
            模块容器
            </summary>
        </member>
        <member name="P:IFramework.Modules.env">
            <summary>
            环境
            </summary>
        </member>
        <member name="M:IFramework.Modules.CreateModule(System.Type,System.String,System.Int32)">
            <summary>
            创建一个模块，创建完了自动绑定
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <param name="priority"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.CreateModule``1(System.String,System.Int32)">
            <summary>
            创建模块
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="priority"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.FindModule(System.Type,System.String)">
            <summary>
            查找模块
            </summary>
            <param name="type">模块类型</param>
            <param name="name">模块名称</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.GetModule(System.Type,System.String,System.Int32)">
            <summary>
            获取模块
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <param name="priority"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.FindModule``1(System.String)">
            <summary>
            查找模块
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.GetModule``1(System.String,System.Int32)">
            <summary>
            获取模块
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="priority"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Modules.#ctor(IFramework.Environment)">
            <summary>
            Ctor
            </summary>
            <param name="env"></param>
        </member>
        <member name="M:IFramework.Modules.OnDispose">
            <summary>
            绑定环境
            </summary>
            <summary>
            释放
            </summary>
        </member>
        <member name="T:IFramework.IModules">
            <summary>
            模块组
            </summary>
        </member>
        <member name="P:IFramework.IModules.coroutine">
            <summary>
            协程
            </summary>
        </member>
        <member name="P:IFramework.IModules.message">
            <summary>
            消息
            </summary>
        </member>
        <member name="P:IFramework.IModules.stringMessage">
            <summary>
            消息（string 版本）
            </summary>
        </member>
        <member name="P:IFramework.IModules.recoder">
            <summary>
            操作记录
            </summary>
        </member>
        <member name="P:IFramework.IModules.inject">
            <summary>
            注入模块
            </summary>
        </member>
        <member name="P:IFramework.IModules.timer">
            <summary>
            计时器
            </summary>
        </member>
        <member name="M:IFramework.IModules.CreateModule(System.Type,System.String,System.Int32)">
            <summary>
            创建模块
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <param name="priority"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.IModules.CreateModule``1(System.String,System.Int32)">
            <summary>
            创建模块
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="priority"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.IModules.GetModule(System.Type,System.String,System.Int32)">
            <summary>
            获取模块
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <param name="priority"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.IModules.GetModule``1(System.String,System.Int32)">
            <summary>
            获取模块
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="priority"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.IModules.FindModule(System.Type,System.String)">
            <summary>
            查找模块
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.IModules.FindModule``1(System.String)">
            <summary>
            查找模块
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:IFramework.LoomModule">
            <summary>
            线程反馈模块
            </summary>
        </member>
        <member name="T:IFramework.Net.OnReceivedHandler">
            <summary>
            接收数据处理,返回的是实际接收到的数据
            </summary>
            <param name="sToken"></param>
            <param name="content"></param>
        </member>
        <member name="T:IFramework.Net.OnReceivedSegmentHandler">
            <summary>
            接受数据处理，返回预设的缓冲区大小和实际接收到的数据偏移和数量
            </summary>
            <param name="session"></param>
        </member>
        <member name="T:IFramework.Net.OnSentHandler">
            <summary>
            发送数据处理
            </summary>
            <param name="session"></param>
        </member>
        <member name="T:IFramework.Net.OnAcceptedHandler">
            <summary>
            接受连接对象处理
            </summary>
            <param name="sToken"></param>
        </member>
        <member name="T:IFramework.Net.OnDisconnectedHandler">
            <summary>
            断开连接对象处理
            </summary>
            <param name="sToken"></param>
        </member>
        <member name="T:IFramework.Net.OnConnectedHandler">
            <summary>
            建立连接对象处理
            </summary>
            <param name="sToken"></param>
            <param name="isConnected"></param>
        </member>
        <member name="P:IFramework.Net.SocketToken.TokenId">
            <summary>
            会话编号
            </summary>
        </member>
        <member name="P:IFramework.Net.SocketToken.TokenSocket">
            <summary>
            会话socket对象
            </summary>
        </member>
        <member name="P:IFramework.Net.SocketToken.TokenIpEndPoint">
            <summary>
            会话的终结点
            </summary>
        </member>
        <member name="M:IFramework.Net.SocketToken.#ctor(System.Int32)">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:IFramework.Net.SocketToken.Close">
            <summary>
            关闭该连接对象，释放相关资源,非完全释放Socket对象
            </summary>
        </member>
        <member name="M:IFramework.Net.SocketToken.Dispose">
            <summary>
            关闭该连接对象并释放该对象资源
            </summary>
        </member>
        <member name="M:IFramework.Net.SocketToken.CompareTo(IFramework.Net.SocketToken)">
            <summary>
            根据SocketId比较大小
            </summary>
            <param name="sToken"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.SocketToken.Dispose(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="isDisposing"></param>
        </member>
        <member name="P:IFramework.Net.Http.HttpHeader.Extensions">
            <summary>
            extend reserve
            </summary>
        </member>
        <member name="P:IFramework.Net.Http.HttpHeader.DNT">
            <summary>
            do not track
            </summary>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.#ctor(System.Int32)">
            <summary>
            构造方法
            </summary>
            <param name="capacity">初始容量</param>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.#ctor(System.Byte[])">
            <summary>
            构造方法
            </summary>
            <param name="bytes">初始字节数组</param>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.Allocate(System.Int32,System.Boolean)">
            <summary>
            构建一个capacity长度的字节缓存区ByteBuffer对象
            </summary>
            <param name="capacity">初始容量</param>
            <param name="fromPool">
            true表示获取一个池化的ByteBuffer对象，池化的对象必须在调用Dispose后才会推入池中，此方法为线程安全的。
            当为true时，从池中获取的对象的实际capacity值。
            </param>
            <returns>ByteBuffer对象</returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.Allocate(System.Byte[],System.Boolean)">
            <summary>
            构建一个以bytes为字节缓存区的ByteBuffer对象，一般不推荐使用
            </summary>
            <param name="bytes">初始字节数组</param>
            <param name="fromPool">
            true表示获取一个池化的ByteBuffer对象，池化的对象必须在调用Dispose后才会推入池中，此方法为线程安全的。
            </param>
            <returns>ByteBuffer对象</returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.FixLength(System.Int32)">
            <summary>
            根据value，确定大于此length的最近的2次方数，如length=7，则返回值为8；length=12，则返回16
            </summary>
            <param name="value">参考容量</param>
            <returns>比参考容量大的最接近的2次方数</returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.Flip(System.Byte[])">
            <summary>
            翻转字节数组，如果本地字节序列为高字节序列，则进行翻转以转换为低字节序列
            </summary>
            <param name="bytes">待转为高字节序的字节数组</param>
            <returns>低字节序列的字节数组</returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.FixSizeAndReset(System.Int32,System.Int32)">
            <summary>
            确定内部字节缓存数组的大小
            </summary>
            <param name="currLen">当前容量</param>
            <param name="futureLen">将来的容量</param>
            <returns>当前缓冲区的最大容量</returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.EnsureWritableBytes(System.Int32)">
            <summary>
            确保有这么多字节可以用来写入
            </summary>
            <param name="minBytes"></param>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.WriteBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            将bytes字节数组从startIndex开始的length字节写入到此缓存区
            </summary>
            <param name="bytes">待写入的字节数据</param>
            <param name="startIndex">写入的开始位置</param>
            <param name="length">写入的长度</param>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.WriteBytes(System.Byte[],System.Int32)">
            <summary>
            将字节数组中从0到length的元素写入缓存区
            </summary>
            <param name="bytes">待写入的字节数据</param>
            <param name="length">写入的长度</param>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.WriteBytes(System.Byte[])">
            <summary>
            将字节数组全部写入缓存区
            </summary>
            <param name="bytes">待写入的字节数据</param>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.Write(IFramework.Net.KCP.BufferQueue)">
            <summary>
            将一个ByteBuffer的有效字节区写入此缓存区中
            </summary>
            <param name="buffer">待写入的字节缓存区</param>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.WriteShort(System.Int16)">
            <summary>
            写入一个int16数据
            </summary>
            <param name="value">short数据</param>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.WriteUshort(System.UInt16)">
            <summary>
            写入一个uint16数据
            </summary>
            <param name="value">ushort数据</param>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.WriteInt(System.Int32)">
            <summary>
            写入一个int32数据
            </summary>
            <param name="value">int数据</param>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.WriteUint(System.UInt32)">
            <summary>
            写入一个uint32数据
            </summary>
            <param name="value">uint数据</param>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.WriteLong(System.Int64)">
            <summary>
            写入一个int64数据
            </summary>
            <param name="value">long数据</param>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.WriteUlong(System.UInt64)">
            <summary>
            写入一个uint64数据
            </summary>
            <param name="value">ulong数据</param>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.WriteFloat(System.Single)">
            <summary>
            写入一个float数据
            </summary>
            <param name="value">float数据</param>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.WriteByte(System.Byte)">
            <summary>
            写入一个byte数据
            </summary>
            <param name="value">byte数据</param>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.WriteByte(System.Int32)">
            <summary>
            写入一个byte数据
            </summary>
            <param name="value">byte数据</param>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.WriteDouble(System.Double)">
            <summary>
            写入一个double类型数据
            </summary>
            <param name="value">double数据</param>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.WriteChar(System.Char)">
            <summary>
            写入一个字符
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.WriteBoolean(System.Boolean)">
            <summary>
            写入一个布尔型数据
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.ReadByte">
            <summary>
            读取一个字节
            </summary>
            <returns>字节数据</returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.Get(System.Int32,System.Int32)">
            <summary>
            获取从index索引处开始len长度的字节
            </summary>
            <param name="index"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.Read(System.Int32)">
            <summary>
            从读取索引位置开始读取len长度的字节数组
            </summary>
            <param name="len">待读取的字节长度</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.ReadUshort">
            <summary>
            读取一个uint16数据
            </summary>
            <returns>ushort数据</returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.ReadShort">
            <summary>
            读取一个int16数据
            </summary>
            <returns>short数据</returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.ReadUint">
            <summary>
            读取一个uint32数据
            </summary>
            <returns>uint数据</returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.ReadInt">
            <summary>
            读取一个int32数据
            </summary>
            <returns>int数据</returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.ReadUlong">
            <summary>
            读取一个uint64数据
            </summary>
            <returns>ulong数据</returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.ReadLong">
            <summary>
            读取一个long数据
            </summary>
            <returns>long数据</returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.ReadFloat">
            <summary>
            读取一个float数据
            </summary>
            <returns>float数据</returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.ReadDouble">
            <summary>
            读取一个double数据
            </summary>
            <returns>double数据</returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.ReadChar">
            <summary>
            读取一个字符
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.ReadBoolean">
            <summary>
            读取布尔型数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.ReadBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从读取索引位置开始读取len长度的字节到disbytes目标字节数组中
            </summary>
            <param name="disbytes">读取的字节将存入此字节数组</param>
            <param name="disstart">目标字节数组的写入索引</param>
            <param name="len">读取的长度</param>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.GetByte(System.Int32)">
            <summary>
            获取一个字节
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.GetByte">
            <summary>
            获取一个字节
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.GetDouble(System.Int32)">
            <summary>
            获取一个双精度浮点数据，不改变数据内容
            </summary>
            <param name="index">字节索引</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.GetDouble">
            <summary>
            获取一个双精度浮点数据，不改变数据内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.GetFloat(System.Int32)">
            <summary>
            获取一个浮点数据，不改变数据内容
            </summary>
            <param name="index">字节索引</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.GetFloat">
            <summary>
            获取一个浮点数据，不改变数据内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.GetLong(System.Int32)">
            <summary>
            获取一个长整形数据，不改变数据内容
            </summary>
            <param name="index">字节索引</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.GetLong">
            <summary>
            获取一个长整形数据，不改变数据内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.GetUlong(System.Int32)">
            <summary>
            获取一个长整形数据，不改变数据内容
            </summary>
            <param name="index">字节索引</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.GetUlong">
            <summary>
            获取一个长整形数据，不改变数据内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.GetInt(System.Int32)">
            <summary>
            获取一个整形数据，不改变数据内容
            </summary>
            <param name="index">字节索引</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.GetInt">
            <summary>
            获取一个整形数据，不改变数据内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.GetUint(System.Int32)">
            <summary>
            获取一个整形数据，不改变数据内容
            </summary>
            <param name="index">字节索引</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.GetUint">
            <summary>
            获取一个整形数据，不改变数据内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.GetShort(System.Int32)">
            <summary>
            获取一个短整形数据，不改变数据内容
            </summary>
            <param name="index">字节索引</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.GetShort">
            <summary>
            获取一个短整形数据，不改变数据内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.GetUshort(System.Int32)">
            <summary>
            获取一个短整形数据，不改变数据内容
            </summary>
            <param name="index">字节索引</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.GetUshort">
            <summary>
            获取一个短整形数据，不改变数据内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.GetChar(System.Int32)">
            <summary>
            获取一个char数据，不改变数据内容
            </summary>
            <param name="index">字节索引</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.GetChar">
            <summary>
            获取一个char数据，不改变数据内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.GetBoolean(System.Int32)">
            <summary>
            获取一个布尔数据，不改变数据内容
            </summary>
            <param name="index">字节索引</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.GetBoolean">
            <summary>
            获取一个布尔数据，不改变数据内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.DiscardReadBytes">
            <summary>
            清除已读字节并重建缓存区
            </summary>
        </member>
        <member name="P:IFramework.Net.KCP.BufferQueue.reader">
            <summary>
            设置/获取读指针位置
            </summary>
        </member>
        <member name="P:IFramework.Net.KCP.BufferQueue.writer">
            <summary>
            设置/获取写指针位置
            </summary>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.MarkReaderIndex">
            <summary>
            标记读取的索引位置
            </summary>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.MarkWriterIndex">
            <summary>
            标记写入的索引位置
            </summary>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.ResetReaderIndex">
            <summary>
            将读取的索引位置重置为标记的读取索引位置
            </summary>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.ResetWriterIndex">
            <summary>
            将写入的索引位置重置为标记的写入索引位置
            </summary>
        </member>
        <member name="P:IFramework.Net.KCP.BufferQueue.canRead">
            <summary>
            可读的有效字节数
            </summary>
            <returns>可读的字节数</returns>
        </member>
        <member name="P:IFramework.Net.KCP.BufferQueue.canWrite">
            <summary>
            可写的剩余空间数
            </summary>
            <returns>可写的字节数</returns>
        </member>
        <member name="P:IFramework.Net.KCP.BufferQueue.capacity">
            <summary>
            获取缓存区容量大小
            </summary>
            <returns>缓存区容量</returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.ToArray">
            <summary>
            获取可读的字节数组
            </summary>
            <returns>字节数据</returns>
        </member>
        <member name="T:IFramework.Net.KCP.BufferQueue.DataType">
            <summary>
            简单的数据类型
            </summary>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.WriteValue(System.Int32,IFramework.Net.KCP.BufferQueue.DataType)">
            <summary>
            写入一个数据
            </summary>
            <param name="value">待写入的数据</param>
            <param name="type">待写入的数据类型</param>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.ReadValue(IFramework.Net.KCP.BufferQueue.DataType)">
            <summary>
            读取一个值，值类型根据type决定，int或short或byte
            </summary>
            <param name="type">值类型</param>
            <returns>int数据</returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.WriteUTF8String(System.String,IFramework.Net.KCP.BufferQueue.DataType)">
            <summary>
            写入一个UTF-8字符串，UTF-8字符串无高低字节序问题
            <para>写入缓冲区的结构为字符串字节长度（类型由lenType指定） + 字符串字节数组</para>
            </summary>
            <param name="content">待写入的字符串</param>
            <param name="lenType">写入的字符串长度类型</param>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.WriteUTF(System.String)">
            <summary>
            写入以short表示的字符串字节长度和字符串字节数据
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.ReadUTF8String(System.Int32)">
            <summary>
            读取一个UTF-8字符串，UTF-8字符串无高低字节序问题
            </summary>
            <param name="len">需读取的字符串长度</param>
            <returns>字符串</returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.ReadUTF8String(IFramework.Net.KCP.BufferQueue.DataType)">
            <summary>
            读取一个UTF-8字符串，UTF-8字符串无高低字节序问题
            </summary>
            <param name="lenType">字符串长度类型</param>
            <returns>字符串</returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.ReadUTF">
            <summary>
            读取short类型的字符串字节长度，然后根据此长度读取对应数量的字节数据后转为字符串
            </summary>
            <returns>UTF-8字符串</returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.Copy">
            <summary>
            复制一个对象，具有与原对象相同的数据，不改变原对象的数据，不包括已读数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.Clone">
            <summary>
            深度复制，具有与原对象相同的数据，不改变原对象的数据，包括已读数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.ForEach(System.Action{System.Byte})">
            <summary>
            遍历所有的字节数据
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.Clear">
            <summary>
            清空此对象，但保留字节缓存数组（空数组）
            </summary>
        </member>
        <member name="M:IFramework.Net.KCP.BufferQueue.Dispose">
            <summary>
            释放对象，清除字节缓存数组，如果此对象为可池化，那么调用此方法将会把此对象推入到池中等待下次调用
            </summary>
        </member>
        <member name="P:IFramework.Net.KCP.Kcp.Mss">
            <summary>
            每个分片最大  大小
            </summary>
        </member>
        <member name="P:IFramework.Net.SocketBufferManager.BlockSize">
            <summary>
            块缓冲区大小
            </summary>
        </member>
        <member name="M:IFramework.Net.SocketBufferManager.#ctor(System.Int32,System.Int32)">
            <summary>
            缓冲区管理构造
            </summary>
            <param name="maxCounts"></param>
            <param name="blockSize"></param>
        </member>
        <member name="M:IFramework.Net.SocketBufferManager.SetBuffer(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            设置缓冲区
            </summary>
            <param name="agrs"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.SocketBufferManager.WriteBuffer(System.Net.Sockets.SocketAsyncEventArgs,System.Byte[],System.Int32,System.Int32)">
            <summary>
            写入缓冲区
            </summary>
            <param name="agrs"></param>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="cnt"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.SocketBufferManager.FreeBuffer(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            释放缓冲区
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:IFramework.Net.SocketBufferManager.BufferToSegments(System.Byte[],System.Int32,System.Int32)">
            <summary>
            自动按发送缓冲区的块大小分多次包
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.NetProtocolProvider.Decode(System.Byte[],System.Int32,System.Int32)">
            <summary>
            解码
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.NetProtocolProvider.Encode(IFramework.Packets.Packet)">
            <summary>
            编码
            </summary>
            <param name="pkg"></param>
            <returns></returns>
        </member>
        <member name="P:IFramework.Net.Tcp.TcpClientProvider.SentCallback">
            <summary>
            发送回调处理
            </summary>
        </member>
        <member name="P:IFramework.Net.Tcp.TcpClientProvider.RecievedCallback">
            <summary>
            接收数据回调处理
            </summary>
        </member>
        <member name="P:IFramework.Net.Tcp.TcpClientProvider.ReceivedOffsetCallback">
            <summary>
            接受数据回调，返回缓冲区和偏移量
            </summary>
        </member>
        <member name="P:IFramework.Net.Tcp.TcpClientProvider.DisconnectedCallback">
            <summary>
            断开连接回调处理
            </summary>
        </member>
        <member name="P:IFramework.Net.Tcp.TcpClientProvider.ConnectedCallback">
            <summary>
            连接回调处理
            </summary>
        </member>
        <member name="P:IFramework.Net.Tcp.TcpClientProvider.IsConnected">
            <summary>
            是否连接状态
            </summary>
        </member>
        <member name="M:IFramework.Net.Tcp.TcpClientProvider.#ctor(System.Int32,System.Int32)">
            <summary>
            构造
            </summary>
            <param name="chunkBufferSize">发送块缓冲区大小</param>
            <param name="bufferNumber">缓冲发送数</param>
        </member>
        <member name="M:IFramework.Net.Tcp.TcpClientProvider.Connect(System.Int32,System.String)">
            <summary>
            异步建立连接
            </summary>
            <param name="port"></param>
            <param name="ip"></param>
        </member>
        <member name="M:IFramework.Net.Tcp.TcpClientProvider.ConnectTo(System.Int32,System.String)">
            <summary>
            异步等待连接返回结果
            </summary>
            <param name="port"></param>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.Tcp.TcpClientProvider.ConnectSync(System.Int32,System.String)">
            <summary>
            同步连接
            </summary>
            <param name="port"></param>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.Tcp.TcpClientProvider.Send(IFramework.Net.SegmentOffset,System.Boolean)">
            <summary>
            根据偏移发送缓冲区数据
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="size"></param>
        </member>
        <member name="M:IFramework.Net.Tcp.TcpClientProvider.SendFile(System.String)">
            <summary>
            发送文件
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:IFramework.Net.Tcp.TcpClientProvider.SendSync(IFramework.Net.SegmentOffset,IFramework.Net.SegmentOffset)">
            <summary>
            同步发送并接收数据,不设置receiveSegment 默认为只发数据
            </summary>
            <param name="buffer"></param>
            <param name="receiveBlock"></param>
            <param name="recAct"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.Tcp.TcpClientProvider.ReceiveSync(IFramework.Net.SegmentOffset,System.Action{IFramework.Net.SegmentOffset})">
            <summary>
            同步接收数据
            </summary>
            <param name="receiveBlock"></param>
            <param name="receivedAction"></param>
        </member>
        <member name="M:IFramework.Net.Tcp.TcpClientProvider.Disconnect">
            <summary>
            断开连接
            </summary>
        </member>
        <member name="P:IFramework.Net.Tcp.TcpServerProvider.AcceptedCallback">
            <summary>
            接受连接回调处理
            </summary>
        </member>
        <member name="P:IFramework.Net.Tcp.TcpServerProvider.ReceivedCallback">
            <summary>
            接收数据回调处理
            </summary>
        </member>
        <member name="P:IFramework.Net.Tcp.TcpServerProvider.ReceivedOffsetCallback">
             <summary>
            接收数据缓冲区，返回缓冲区的实际偏移和数量
             </summary>
        </member>
        <member name="P:IFramework.Net.Tcp.TcpServerProvider.SentCallback">
            <summary>
            发送回调处理
            </summary>
        </member>
        <member name="P:IFramework.Net.Tcp.TcpServerProvider.DisconnectedCallback">
            <summary>
            断开连接回调处理
            </summary>
        </member>
        <member name="P:IFramework.Net.Tcp.TcpServerProvider.NumberOfConnections">
            <summary>
            连接数
            </summary>
        </member>
        <member name="M:IFramework.Net.Tcp.TcpServerProvider.#ctor(System.Int32,System.Int32)">
            <summary>
            构造
            </summary>
            <param name="maxConnections">最大连接数</param>
            <param name="chunkBufferSize">接收块缓冲区</param>
        </member>
        <member name="E:IFramework.Net.Udp.SocketReceive.OnReceived">
            <summary>
            接收事件
            </summary>
        </member>
        <member name="M:IFramework.Net.Udp.SocketReceive.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            构造方法
            </summary>
            <param name="port">本机接收数据端口</param>
            <param name="bufferSize">接收缓冲区大小</param>
        </member>
        <member name="M:IFramework.Net.Udp.SocketReceive.StartReceive">
            <summary>
            开始接收数据
            </summary>
        </member>
        <member name="M:IFramework.Net.Udp.SocketReceive.StopReceive">
            <summary>
            停止接收数据
            </summary>
        </member>
        <member name="M:IFramework.Net.Udp.SocketReceive.SocketArgs_Completed(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            接收完成事件
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:IFramework.Net.Udp.SocketReceive.ProcessReceive(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            处理接收信息
            </summary>
            <param name="arg"></param>
        </member>
        <member name="E:IFramework.Net.Udp.SocketSend.SentEventHandler">
            <summary>
            发送事件回调
            </summary>
        </member>
        <member name="M:IFramework.Net.Udp.SocketSend.#ctor(System.Int32,System.Int32)">
            <summary>
            初始化发送对象
            </summary>
            <param name="maxCountClient">客户端最大数</param>
        </member>
        <member name="M:IFramework.Net.Udp.SocketSend.Send(IFramework.Net.SegmentOffset,System.Net.IPEndPoint,System.Boolean)">
            <summary>
            发送数据
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="size"></param>
            <param name="waiting"></param>
            <param name="remoteEP"></param>
        </member>
        <member name="M:IFramework.Net.Udp.SocketSend.SendSync(IFramework.Net.SegmentOffset,System.Net.IPEndPoint)">
            <summary>
            同步发送数据
            </summary>
            <param name="data"></param>
            <param name="offset"></param>
            <param name="size"></param>
            <param name="remoteEP"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.Udp.SocketSend.DisposeSocketPool">
            <summary>
            释放缓冲池
            </summary>
        </member>
        <member name="M:IFramework.Net.Udp.SocketSend.ProcessSent(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            处理发送的数据
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:IFramework.Net.Udp.SocketSend.ClientSocket_Completed(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            完成发送事件
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:IFramework.Net.Udp.UdpClientProvider.ReceivedCallbackHandler">
            <summary>
            接收回调处理
            </summary>
        </member>
        <member name="P:IFramework.Net.Udp.UdpClientProvider.SentCallbackHandler">
            <summary>
            发送回调处理
            </summary>
        </member>
        <member name="P:IFramework.Net.Udp.UdpClientProvider.ReceivedOffsetHandler">
            <summary>
            接收缓冲区回调
            </summary>
        </member>
        <member name="M:IFramework.Net.Udp.UdpClientProvider.#ctor(System.Int32,System.Int32)">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:IFramework.Net.Udp.UdpClientProvider.Connect(System.Int32,System.String)">
            <summary>
            尝试连接
            </summary>
            <param name="port"></param>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.Udp.UdpClientProvider.SendSync(IFramework.Net.SegmentOffset,IFramework.Net.SegmentOffset)">
            <summary>
            同步发送
            </summary>
            <param name="buffer"></param>
            <param name="recAct"></param>
            <param name="recBufferSize"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Net.Udp.UdpClientProvider.ReceiveSync(IFramework.Net.SegmentOffset,System.Action{IFramework.Net.SegmentOffset})">
            <summary>
            同步接收
            </summary>
            <param name="recAct"></param>
            <param name="recBufferSize"></param>
        </member>
        <member name="M:IFramework.Net.Udp.UdpClientProvider.StartReceive">
            <summary>
            开始接收数据
            </summary>
            <param name="remoteEP"></param>
        </member>
        <member name="M:IFramework.Net.Udp.UdpClientProvider.Initialize">
            <summary>
            初始化对象
            </summary>
            <param name="recBufferSize"></param>
            <param name="port"></param>
        </member>
        <member name="P:IFramework.Net.Udp.UdpServerProvider.ReceivedCallbackHandler">
            <summary>
            接收事件响应回调
            </summary>
        </member>
        <member name="P:IFramework.Net.Udp.UdpServerProvider.SentCallbackHandler">
            <summary>
            发送事件响应回调
            </summary>
        </member>
        <member name="P:IFramework.Net.Udp.UdpServerProvider.DisconnectedCallbackHandler">
            <summary>
            断开连接事件回调
            </summary>
        </member>
        <member name="M:IFramework.Net.Udp.UdpServerProvider.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:IFramework.Net.Udp.UdpServerProvider.Start(System.Int32)">
            <summary>
            启动服务
            </summary>
            <param name="port">接收数据端口</param>
            <param name="recBufferSize">接收缓冲区</param>
            <param name="maxConnectionCount">最大客户端连接数</param>
        </member>
        <member name="M:IFramework.Net.Udp.UdpServerProvider.Stop">
            <summary>
            停止服务
            </summary>
        </member>
        <member name="P:IFramework.Net.WebSocket.AcceptInfo.SecWebSocketAccept">
            <summary>
            接入访问验证码
            </summary>
        </member>
        <member name="P:IFramework.Net.WebSocket.AcceptInfo.SecWebSocketLocation">
            <summary>
            客户端来源
            </summary>
        </member>
        <member name="P:IFramework.Net.WebSocket.AcceptInfo.SecWebSocketOrigin">
            <summary>
            服务端来源
            </summary>
        </member>
        <member name="P:IFramework.Net.WebSocket.AccessInfo.Host">
            <summary>
            连接主机
            </summary>
        </member>
        <member name="P:IFramework.Net.WebSocket.AccessInfo.Origin">
            <summary>
            连接源
            </summary>
        </member>
        <member name="P:IFramework.Net.WebSocket.AccessInfo.SecWebSocketExtensions">
            <summary>
            安全扩展
            </summary>
        </member>
        <member name="P:IFramework.Net.WebSocket.AccessInfo.SecWebSocketKey">
            <summary>
            安全密钥
            </summary>
        </member>
        <member name="P:IFramework.Net.WebSocket.AccessInfo.SecWebSocketVersion">
            <summary>
            安全版本
            </summary>
        </member>
        <member name="P:IFramework.Net.WebSocket.BaseInfo.HttpProto">
            <summary>
            http连接协议
            </summary>
        </member>
        <member name="P:IFramework.Net.WebSocket.BaseInfo.Connection">
            <summary>
            连接类型
            </summary>
        </member>
        <member name="P:IFramework.Net.WebSocket.BaseInfo.Upgrade">
            <summary>
            连接方式
            </summary>
        </member>
        <member name="P:IFramework.Net.WebSocket.DataFrame.IsEof">
            <summary>
            如果为true则该消息为消息尾部,如果false为零则还有后续数据包;
            </summary>
        </member>
        <member name="P:IFramework.Net.WebSocket.DataFrame.Rsv1">
            <summary>
            RSV1,RSV2,RSV3,各1位，用于扩展定义的,如果没有扩展约定的情况则必须为0
            </summary>
        </member>
        <member name="P:IFramework.Net.WebSocket.DataFrame.OpCode">
             <summary>
            0x0表示附加数据帧
            0x1表示文本数据帧
            0x2表示二进制数据帧
            0x3-7暂时无定义，为以后的非控制帧保留
            0x8表示连接关闭
            0x9表示ping
            0xA表示pong
            0xB-F暂时无定义，为以后的控制帧保留
             </summary>
        </member>
        <member name="P:IFramework.Net.WebSocket.DataFrame.Mask">
            <summary>
            true使用掩码解析消息
            </summary>
        </member>
        <member name="M:IFramework.Net.WebSocket.WSClientProvider.Connect(System.String)">
            <summary>
            wsUrl:ws://ip:port
            </summary>
            <param name="wsUrl"></param>
            <returns></returns>
        </member>
        <member name="T:IFramework.Net.LockWait">
            <summary>
            自旋锁
            </summary>
        </member>
        <member name="M:IFramework.Net.LockWait.#ctor(IFramework.Net.LockParam@)">
            <summary>
            Ctor
            </summary>
            <param name="param"></param>
        </member>
        <member name="M:IFramework.Net.LockWait.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="T:IFramework.Net.LockParam">
            <summary>
            自旋锁信号
            </summary>
        </member>
        <member name="T:IFramework.ActivatorCreatePool`1">
            <summary>
            Activator 创建实例 对现池
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:IFramework.ActivatorCreatePool`1.#ctor(System.Object[])">
            <summary>
            ctor
            </summary>
            <param name="args">构造固定参数</param>
        </member>
        <member name="M:IFramework.ActivatorCreatePool`1.CreateNew(IFramework.IEventArgs)">
            <summary>
            创建
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="T:IFramework.Queue.FastPriorityQueue`1">
            <summary>
            快速优先级队列
            </summary>
            <typeparam name="T">节点元素类型</typeparam>
        </member>
        <member name="M:IFramework.Queue.FastPriorityQueue`1.#ctor(System.Int32)">
            <summary>
            Ctor
            </summary>
            <param name="capcity">允许入队的最大数量(如果超过将导致未定义的操作)</param>
        </member>
        <member name="P:IFramework.Queue.FastPriorityQueue`1.count">
            <summary>
            返回队列里的元素数量<br />
            O(1)
            </summary>
        </member>
        <member name="P:IFramework.Queue.FastPriorityQueue`1.capcity">
            <summary>
            队列中可以入队的最大数量<br />
            如果入队数量超过队列的大小(Count == MaxSize时Enqueue())，会导致未定义的操作<br />
            O(1)
            </summary>
        </member>
        <member name="M:IFramework.Queue.FastPriorityQueue`1.Clear">
            <summary>
            移除队列里的所有元素<br />
            O(n) (因此请勿频繁使用此方法)
            </summary>
        </member>
        <member name="M:IFramework.Queue.FastPriorityQueue`1.Contains(`0)">
            <summary>
            判断当前元素是否在队列中<br />
            如果元素被添加到其他的队列，则结果是不确定的，
            除非调用了之前队列的ResetNode(node)方法<br />
            O(1)
            </summary>
            <param name="node">需要判断的元素</param>
            <returns>如果队列包含这个元素则返回true 否则为false</returns>
        </member>
        <member name="M:IFramework.Queue.FastPriorityQueue`1.Enqueue(`0,System.Single)">
            <summary>
            将优先级节点入队，优先级值小的将会排在队列前面，优先级相同的节点任意排序<br />
            如果队列是满的，则执行未定义的操作<br />
            如果节点元素已经入队了，则执行未定义的操作<br />
            如果节点已经加入到了其他队列，除非在此之前调用了之前队列的ResetNode(node)方法，否则结果是未定义的<br />
            O(log n)
            </summary>
        </member>
        <member name="M:IFramework.Queue.FastPriorityQueue`1.HasHigherPriority(`0,`0)">
            <summary>
            对两个参数的优先级进行比较
            </summary>
            <param name="higher">第一个参数</param>
            <param name="lower">第二个参数</param>
            <returns>
            如果第一个参数的优先级大于第二个参数则返回true，否则返回false<br />
            如果两个参数为同一个节点，返回false
            </returns>
        </member>
        <member name="M:IFramework.Queue.FastPriorityQueue`1.HasHigherOrEqualPriority(`0,`0)">
            <summary>
            对两个参数的优先级进行比较
            </summary>
            <param name="higher">第一个参数</param>
            <param name="lower">第二个参数</param>
            <returns>
            如果第一个参数的优先级大于第二个参数则返回true，否则返回false<br />
            如果两个参数为同一个节点，返回true
            </returns>
        </member>
        <member name="M:IFramework.Queue.FastPriorityQueue`1.Dequeue">
            <summary>
            队列头部出队<br />
            如果队列为空则执行未定义的操作<br />
            O(log n)
            </summary>
            <returns>出队的元素</returns>
        </member>
        <member name="M:IFramework.Queue.FastPriorityQueue`1.Resize(System.Int32)">
            <summary>
            重新设置队列的大小，使其可以容纳更多的节点，当前的所有节点都会保留<br />
            如果试图将队列大小设置成比当前队列中的数量小时，会执行未定义的操作<br />
            O(n)
            </summary>
        </member>
        <member name="P:IFramework.Queue.FastPriorityQueue`1.first">
            <summary>
            队列的第一个元素<br />
            如果队列为空，则执行未定义的操作<br />
            O(1)
            </summary>
        </member>
        <member name="M:IFramework.Queue.FastPriorityQueue`1.UpdatePriority(`0,System.Single)">
            <summary>
            更改队列里某个节点的优先级<br />
            <b>忘记调用这个方法会导致队列损坏!</b><br />
            对不在这个队列中的节点元素调用这个方法会执行未定义的行为<br />
            O(log n)
            </summary>
        </member>
        <member name="M:IFramework.Queue.FastPriorityQueue`1.Remove(`0)">
            <summary>
            从队列中删除给定节点元素，这个节点不一定是队列的头<br />
            如果节点并未在队列中，结果是未定义的，如果不确定，则先使用Contains()确认<br />
            O(log n)
            </summary>
        </member>
        <member name="M:IFramework.Queue.FastPriorityQueue`1.ResetNode(`0)">
            <summary>
            默认情况下有加入过一个队列的节点元素不能添加到另一个队列<br />
            如果需要这么做，则在添加到另一个队列前调用当前队列的此方法<br />
            如果节点当前在队列中或者属于其他队列，则结果是未定义的
            </summary>
        </member>
        <member name="M:IFramework.Queue.FastPriorityQueue`1.GetEnumerator">
            <summary>
            迭代器
            </summary>
            <returns>迭代器</returns>
        </member>
        <member name="T:IFramework.Queue.FastPriorityQueueNode">
            <summary>
            快速优先级队列节点
            </summary>
        </member>
        <member name="P:IFramework.Queue.FastPriorityQueueNode.priority">
            <summary>
            节点元素的优先级 <br />.
            无法修改 - 请查阅 queue.Enqueue() 和 queue.UpdatePriority()
            </summary>
        </member>
        <member name="P:IFramework.Queue.FastPriorityQueueNode.position">
            <summary>
            当前元素在队列里的位置
            </summary>
        </member>
        <member name="T:IFramework.Queue.GenericPriorityQueue`2">
            <summary>
            泛型优先级队列
            </summary>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TPriority"></typeparam>
        </member>
        <member name="M:IFramework.Queue.GenericPriorityQueue`2.#ctor(System.Int32)">
            <summary>
            Ctor
            </summary>
            <param name="maxNodes">允许入队的最大数量(如果超过将导致未定义的操作)</param>
        </member>
        <member name="M:IFramework.Queue.GenericPriorityQueue`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`1})">
            <summary>
            Ctor
            </summary>
            <param name="maxNodes">允许入队的最大数量(如果超过将导致未定义的操作)</param>
            <param name="comparer">用于比较优先级的TPriority值</param>
        </member>
        <member name="M:IFramework.Queue.GenericPriorityQueue`2.#ctor(System.Int32,System.Comparison{`1})">
            <summary>
            Ctor
            </summary>
            <param name="maxNodes">允许入队的最大数量(如果超过将导致未定义的操作)</param>
            <param name="comparer">用于比较优先级的TPriority值</param>
        </member>
        <member name="P:IFramework.Queue.GenericPriorityQueue`2.count">
            <summary>
            返回队列里的元素数量<br />
            O(1)
            </summary>
        </member>
        <member name="P:IFramework.Queue.GenericPriorityQueue`2.capcity">
            <summary>
            队列中可以入队的最大数量<br />
            如果入队数量超过队列的大小(Count == MaxSize时Enqueue())，会导致未定义的操作<br />
            O(1)
            </summary>
        </member>
        <member name="M:IFramework.Queue.GenericPriorityQueue`2.Clear">
            <summary>
            移除队列里的所有元素<br />
            O(n) (因此请勿频繁使用此方法)
            </summary>
        </member>
        <member name="M:IFramework.Queue.GenericPriorityQueue`2.Contains(`0)">
            <summary>
            判断当前元素是否在队列中<br />
            如果元素被添加到其他的队列，则结果是不确定的，
            除非调用了之前队列的ResetNode(node)方法<br />
            O(1)
            </summary>
            <param name="node">需要判断的元素</param>
            <returns>如果队列包含这个元素则返回true 否则为false</returns>
        </member>
        <member name="M:IFramework.Queue.GenericPriorityQueue`2.Enqueue(`0,`1)">
            <summary>
            将优先级节点入队，优先级值小的将会排在队列前面，优先级相同的节点以先进先出排序<br />
            如果队列是满的，则执行未定义的操作<br />
            如果节点元素已经入队了，则执行未定义的操作<br />
            如果节点已经在队列中了，除非在此之前调用了之前队列的ResetNode(node)方法，否则结果是未定义的<br />
            O(log n)
            </summary>
        </member>
        <member name="M:IFramework.Queue.GenericPriorityQueue`2.HasHigherPriority(`0,`0)">
            <summary>
            对两个参数的优先级进行比较
            </summary>
            <param name="higher">第一个参数</param>
            <param name="lower">第二个参数</param>
            <returns>
            如果第一个参数的优先级大于第二个参数则返回true，否则返回false<br />
            如果两个参数为同一个节点，返回false
            </returns>
        </member>
        <member name="M:IFramework.Queue.GenericPriorityQueue`2.Dequeue">
            <summary>
            队列头部出队
            如果队列为空则执行未定义的操作<br />
            O(log n)
            </summary>
            <returns>出队的元素</returns>
        </member>
        <member name="M:IFramework.Queue.GenericPriorityQueue`2.Resize(System.Int32)">
            <summary>
            重新设置队列的大小，使其可以容纳更多的节点，当前的所有节点都会保留<br />
            如果试图将队列大小设置成比当前队列中的数量小时，会执行未定义的操作<br />
            O(n)
            </summary>
        </member>
        <member name="P:IFramework.Queue.GenericPriorityQueue`2.first">
            <summary>
            队列的第一个元素<br />
            如果队列为空，则执行未定义的操作<br />
            O(1)
            </summary>
        </member>
        <member name="M:IFramework.Queue.GenericPriorityQueue`2.UpdatePriority(`0,`1)">
            <summary>
            更改队列里某个节点的优先级<br />
            <b>忘记调用这个方法会导致队列损坏!</b><br />
            对不在这个队列中的节点元素调用这个方法会执行未定义的行为<br />
            O(log n)
            </summary>
        </member>
        <member name="M:IFramework.Queue.GenericPriorityQueue`2.Remove(`0)">
            <summary>
            从队列中删除给定节点元素，这个节点不一定是队列的头<br />
            如果节点并未在队列中，结果是未定义的，如果不确定，则先使用Contains()确认<br />
            O(log n)
            </summary>
        </member>
        <member name="M:IFramework.Queue.GenericPriorityQueue`2.ResetNode(`0)">
            <summary>
            默认情况下有加入过一个队列的节点元素不能添加到另一个队列<br />
            如果需要这么做，则在添加到另一个队列前调用当前队列的此方法<br />
            如果节点当前在节点中或者属于其他队列，则结果是未定义的
            </summary>
        </member>
        <member name="M:IFramework.Queue.GenericPriorityQueue`2.GetEnumerator">
            <summary>
            迭代器
            </summary>
            <returns>迭代器</returns>
        </member>
        <member name="T:IFramework.Queue.GenericPriorityQueueNode`1">
            <summary>
            泛型优先级队列节点
            </summary>
            <typeparam name="TPriority">优先程度</typeparam>
        </member>
        <member name="P:IFramework.Queue.GenericPriorityQueueNode`1.priority">
            <summary>
            节点元素的优先级 <br />
            无法修改 - 请查阅 queue.Enqueue() 和 queue.UpdatePriority()
            </summary>
        </member>
        <member name="P:IFramework.Queue.GenericPriorityQueueNode`1.position">
            <summary>
            当前元素在队列中的位置
            </summary>
        </member>
        <member name="P:IFramework.Queue.GenericPriorityQueueNode`1.insertPosition">
            <summary>
            元素插入时的序号
            </summary>
        </member>
        <member name="T:IFramework.Queue.IFixedSizePriorityQueue`2">
            <summary>
            可变大小的优先级队列
            </summary>
            <typeparam name="TItem">队列元素</typeparam>
            <typeparam name="TPriority">紧急程度</typeparam>
        </member>
        <member name="M:IFramework.Queue.IFixedSizePriorityQueue`2.Resize(System.Int32)">
            <summary>
            重新设置队列的大小，使其可以容纳更多的节点，当前的所有节点都会保留<br />
            如果试图将队列大小设置成比当前队列中的数量小时，会导致未定义的操作
            </summary>
            <param name="maxNodes">要设置的最大数量</param>
        </member>
        <member name="P:IFramework.Queue.IFixedSizePriorityQueue`2.capcity">
            <summary>
            队列中可以入队的最大数量<br />
            如果入队数量超过队列的大小(Count == MaxSize时Enqueue())，会导致未定义的操作
            </summary>
        </member>
        <member name="M:IFramework.Queue.IFixedSizePriorityQueue`2.ResetNode(`0)">
            <summary>
            默认情况下在队列中的元素不能添加到另一个队列<br />
            如果需要这么做，则在添加到另一个队列前调用当前队列的此方法
            </summary>
        </member>
        <member name="T:IFramework.Queue.IPriorityQueue`2">
            <summary>
            优先级队列接口
            </summary>
            <typeparam name="TItem">队列元素</typeparam>
            <typeparam name="TPriority">紧急程度</typeparam>
        </member>
        <member name="M:IFramework.Queue.IPriorityQueue`2.Enqueue(`0,`1)">
            <summary>
            将优先级节点入队，优先级值小的将会排在队列前面(越小越紧急)
            </summary>
        </member>
        <member name="M:IFramework.Queue.IPriorityQueue`2.Dequeue">
            <summary>
            将队列的第一个元素从队列中出队
            </summary>
        </member>
        <member name="M:IFramework.Queue.IPriorityQueue`2.Clear">
            <summary>
            清除队列里的所有元素
            </summary>
        </member>
        <member name="M:IFramework.Queue.IPriorityQueue`2.Contains(`0)">
            <summary>
            判断队列中是否包含所给元素
            </summary>
            <param name="node">需要判断是否包含的元素</param>
            <returns>如果包含则返回true，否则返回false</returns>
        </member>
        <member name="M:IFramework.Queue.IPriorityQueue`2.Remove(`0)">
            <summary>
            在队列中移除匹配的第一个的所给元素
            </summary>
        </member>
        <member name="M:IFramework.Queue.IPriorityQueue`2.UpdatePriority(`0,`1)">
            <summary>
            更新节点元素的优先程度
            </summary>
        </member>
        <member name="P:IFramework.Queue.IPriorityQueue`2.first">
            <summary>
            队列的第一个元素
            </summary>
        </member>
        <member name="P:IFramework.Queue.IPriorityQueue`2.count">
            <summary>
            元素数量
            </summary>
        </member>
        <member name="T:IFramework.Queue.SimplePriorityQueue`2">
            <summary>
            简易优先级队列
            </summary>
            <typeparam name="TItem">队列元素</typeparam>
            <typeparam name="TPriority">紧急程度</typeparam>
        </member>
        <member name="T:IFramework.Queue.SimplePriorityQueue`2.SimpleNode">
            <summary>
            简单优先级队列节点
            </summary>
        </member>
        <member name="M:IFramework.Queue.SimplePriorityQueue`2.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:IFramework.Queue.SimplePriorityQueue`2.#ctor(System.Collections.Generic.IComparer{`1})">
            <summary>
            Ctor
            </summary>
            <param name="priorityComparer">用于比较优先级的TPriority值, 默认为Comparer&lt;TPriority&gt;.default</param>
        </member>
        <member name="M:IFramework.Queue.SimplePriorityQueue`2.#ctor(System.Comparison{`1})">
            <summary>
            Ctor
            </summary>
            <param name="priorityComparer">用于比较优先级的TPriority值</param>
        </member>
        <member name="M:IFramework.Queue.SimplePriorityQueue`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Ctor
            </summary>
            <param name="itemEquality">用于比较TItem值是否相等的方法</param>
        </member>
        <member name="M:IFramework.Queue.SimplePriorityQueue`2.#ctor(System.Collections.Generic.IComparer{`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Ctor
            </summary>
            <param name="priorityComparer">用于比较优先级的TPriority值, 默认为Comparer&lt;TPriority&gt;.default</param>
            <param name="itemEquality">用于比较TItem值是否相等的方法</param>
        </member>
        <member name="M:IFramework.Queue.SimplePriorityQueue`2.#ctor(System.Comparison{`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Ctor
            </summary>
            <param name="priorityComparer">用于比较优先级的TPriority值, 默认为Comparer&lt;TPriority&gt;.default</param>
            <param name="itemEquality">用于比较TItem值是否相等的方法</param>
        </member>
        <member name="M:IFramework.Queue.SimplePriorityQueue`2.GetExistingNode(`0)">
            <summary>
            根据所给的item获取队列中的节点
            </summary>
            <returns>匹配的SimpleNode节点</returns>
        </member>
        <member name="M:IFramework.Queue.SimplePriorityQueue`2.AddToNodeCache(IFramework.Queue.SimplePriorityQueue{`0,`1}.SimpleNode)">
            <summary>
            将节点添加到节点缓存<br />
            O(1) 或 O(log n)
            </summary>
            <param name="node">需要添加到缓存的节点</param>
        </member>
        <member name="M:IFramework.Queue.SimplePriorityQueue`2.RemoveFromNodeCache(IFramework.Queue.SimplePriorityQueue{`0,`1}.SimpleNode)">
            <summary>
            将节点从节点缓存中删除<br />
            O(1) 或 O(log n) 【假设没有重复】
            </summary>
            <param name="node">需要从缓存中删除的节点</param>
        </member>
        <member name="P:IFramework.Queue.SimplePriorityQueue`2.count">
            <summary>
            返回队列里的元素数量<br />
            O(1)
            </summary>
        </member>
        <member name="P:IFramework.Queue.SimplePriorityQueue`2.first">
            <summary>
            队列的第一个元素<br />
            如果队列为空，则报错<br />
            O(1)
            </summary>
        </member>
        <member name="M:IFramework.Queue.SimplePriorityQueue`2.Clear">
            <summary>
            清空队列里的所有元素<br />
            O(n)
            </summary>
        </member>
        <member name="M:IFramework.Queue.SimplePriorityQueue`2.Contains(`0)">
            <summary>
            判断当前元素是否在队列中<br />
            O(1)
            </summary>
            <param name="item">需要判断的元素</param>
            <returns>如果队列包含这个元素则返回true 否则为false</returns>
        </member>
        <member name="M:IFramework.Queue.SimplePriorityQueue`2.Dequeue">
            <summary>
            队列头出队<br />
            如果队列是空的则抛出异常<br />
            O(log n)
            </summary>
            <returns>出队的元素</returns>
        </member>
        <member name="M:IFramework.Queue.SimplePriorityQueue`2.EnqueueNoLockOrCache(`0,`1)">
            <summary>
            不用lock(_queue)和AddToNodeCache(node)将给定的元素和优先级值入队
            </summary>
            <param name="item">入队元素</param>
            <param name="priority">优先级值</param>
            <returns>入队的SimpleNode对象</returns>
        </member>
        <member name="M:IFramework.Queue.SimplePriorityQueue`2.Enqueue(`0,`1)">
            <summary>
            将节点元素入队，优先级值小的将会排在队列前面，优先级相同的节点以先进先出排序<br />
            队列大小会自动调整，所以不用考虑是否会满<br />
            重复添加以及空值都是允许的<br />
            O(log n)
            </summary>
        </member>
        <member name="M:IFramework.Queue.SimplePriorityQueue`2.EnqueueWithoutDuplicates(`0,`1)">
            <summary>
            不重复入队
            将一个不在队列中的item及其优先级入队，优先级值小的会被排在前面，相同的优先级以先进先出排序<br />
            队列是自动设置大小的，所以不用关心队列是否是满的<br />
            空值是允许的<br />
            O(log n)
            </summary>
            <returns> 成功入队返回true，否则返回false；如果在队列中存在则返回false</returns>
        </member>
        <member name="M:IFramework.Queue.SimplePriorityQueue`2.Remove(`0)">
            <summary>
            从队列中删除给定节点元素，这个节点不一定是队列的头<br />
            如果节点并未在队列中，结果是未定义的，如果不确定，则先使用Contains()确认<br />
            如果有多个副本加入到队列中，则删除匹配的第一个<br />
            O(log n)
            </summary>
        </member>
        <member name="M:IFramework.Queue.SimplePriorityQueue`2.UpdatePriority(`0,`1)">
            <summary>
            更改队列里某个节点的优先级<br />
            对不在这个队列中的节点元素调用这个方法会抛出异常<br />
            如果item多次入队，只有第一个item会被更新<br />
            (如果需要同一时间多次入队且可以同时将他们更新，请将你的items放入包装类中来区分它们)<br />
            O(log n)
            </summary>
        </member>
        <member name="M:IFramework.Queue.SimplePriorityQueue`2.GetPriority(`0)">
            <summary>
            返回给定Item的TPriority值
            对不在队列中的节点元素调用此方法会抛出异常
            如果item多次入队，只有第一个的优先级值会被返回<br />
            (如果需要同一时间多次入队且可以同时将他们更新，请将你的items放入包装类中来区分它们)<br />
            O(1)
            </summary>
            <returns>对应的优先级值</returns>
        </member>
        <member name="M:IFramework.Queue.SimplePriorityQueue`2.TryFirst(`0@)">
            Get the head of the queue, without removing it (use TryDequeue() for that).
            Useful for multi-threading, where the queue may become empty between calls to Contains() and First
            Returns true if successful, false otherwise
            O(1)
        </member>
        <member name="M:IFramework.Queue.SimplePriorityQueue`2.TryDequeue(`0@)">
            <summary>
            Removes the head of the queue (node with minimum priority; ties are broken by order of insertion), and sets it to first.
            Useful for multi-threading, where the queue may become empty between calls to Contains() and Dequeue()
            Returns true if successful; false if queue was empty
            O(log n)
            </summary>
        </member>
        <member name="M:IFramework.Queue.SimplePriorityQueue`2.TryRemove(`0)">
            <summary>
            Attempts to remove an item from the queue.  The item does not need to be the head of the queue.  
            Useful for multi-threading, where the queue may become empty between calls to Contains() and Remove()
            Returns true if the item was successfully removed, false if it wasn't in the queue.
            If multiple copies of the item are enqueued, only the first one is removed. 
            O(log n)
            </summary>
        </member>
        <member name="M:IFramework.Queue.SimplePriorityQueue`2.TryUpdatePriority(`0,`1)">
            <summary>
            Call this method to change the priority of an item.
            Useful for multi-threading, where the queue may become empty between calls to Contains() and UpdatePriority()
            If the item is enqueued multiple times, only the first one will be updated.
            (If your requirements are complex enough that you need to enqueue the same item multiple times <i>and</i> be able
            to update all of them, please wrap your items in a wrapper class so they can be distinguished).
            Returns true if the item priority was updated, false otherwise.
            O(log n)
            </summary>
        </member>
        <member name="M:IFramework.Queue.SimplePriorityQueue`2.TryGetPriority(`0,`1@)">
            <summary>
            Attempt to get the priority of the given item.
            Useful for multi-threading, where the queue may become empty between calls to Contains() and GetPriority()
            If the item is enqueued multiple times, only the priority of the first will be returned.
            (If your requirements are complex enough that you need to enqueue the same item multiple times <i>and</i> be able
            to query all their priorities, please wrap your items in a wrapper class so they can be distinguished).
            Returns true if the item was found in the queue, false otherwise
            O(1)
            </summary>
        </member>
        <member name="M:IFramework.Queue.SimplePriorityQueue`2.GetEnumerator">
            <summary>
            获取迭代器
            </summary>
            <returns>迭代器</returns>
        </member>
        <member name="T:IFramework.Queue.SimplePriorityQueue`1">
            <summary>
            A simplified priority queue implementation.  Is stable, auto-resizes, and thread-safe, at the cost of being slightly slower than
            FastPriorityQueue
            This class is kept here for backwards compatibility.  It's recommended you use SimplePriorityQueue&lt;TItem, TPriority&gt;
            </summary>
            <typeparam name="TItem">The type to enqueue</typeparam>
        </member>
        <member name="M:IFramework.Queue.SimplePriorityQueue`1.#ctor">
            <summary>
            Instantiate a new Priority Queue
            </summary>
        </member>
        <member name="M:IFramework.Queue.SimplePriorityQueue`1.#ctor(System.Collections.Generic.IComparer{System.Single})">
            <summary>
            Instantiate a new Priority Queue
            </summary>
            <param name="comparer">The comparer used to compare priority values.  Defaults to Comparer&lt;float&gt;.default</param>
        </member>
        <member name="M:IFramework.Queue.SimplePriorityQueue`1.#ctor(System.Comparison{System.Single})">
            <summary>
            Instantiate a new Priority Queue
            </summary>
            <param name="comparer">The comparison function to use to compare priority values</param>
        </member>
        <member name="T:IFramework.Queue.StablePriorityQueue`1">
            <summary>
            稳定优先级队列
            </summary>
            <typeparam name="T">节点元素类型</typeparam>
        </member>
        <member name="M:IFramework.Queue.StablePriorityQueue`1.#ctor(System.Int32)">
            <summary>
            Ctor
            </summary>
            <param name="capicty">允许入队的最大数量(如果超过将导致未定义的操作)</param>
        </member>
        <member name="P:IFramework.Queue.StablePriorityQueue`1.count">
            <summary>
            返回队列里的元素数量<br />
            O(1)
            </summary>
        </member>
        <member name="P:IFramework.Queue.StablePriorityQueue`1.capcity">
            <summary>
            队列中可以入队的最大数量<br />
            如果入队数量超过队列的大小(Count == MaxSize时Enqueue())，会导致未定义的操作<br />
            O(1)
            </summary>
        </member>
        <member name="M:IFramework.Queue.StablePriorityQueue`1.Clear">
            <summary>
            移除队列里的所有元素<br />
            O(n) (因此请勿频繁使用此方法)
            </summary>
        </member>
        <member name="M:IFramework.Queue.StablePriorityQueue`1.Contains(`0)">
            <summary>
            判断当前元素是否在队列中<br />
            如果元素被添加到其他的队列，则结果是不确定的，
            除非调用了之前队列的ResetNode(node)方法<br />
            O(1)
            </summary>
            <param name="node">需要判断的元素</param>
            <returns>如果队列包含这个元素则返回true 否则为false</returns>
        </member>
        <member name="M:IFramework.Queue.StablePriorityQueue`1.Enqueue(`0,System.Single)">
            <summary>
            将优先级节点入队，优先级值小的将会排在队列前面，优先级相同的节点以先进先出排序<br />
            如果队列是满的，则执行未定义的操作<br />
            如果节点元素已经入队了，则执行未定义的操作<br />
            如果节点已经在队列中了，除非在此之前调用了之前队列的ResetNode(node)方法，否则结果是未定义的<br />
            O(log n)
            </summary>
        </member>
        <member name="M:IFramework.Queue.StablePriorityQueue`1.HasHigherPriority(`0,`0)">
            <summary>
            对两个参数的优先级进行比较
            </summary>
            <param name="higher">第一个参数</param>
            <param name="lower">第二个参数</param>
            <returns>
            如果第一个参数的优先级大于第二个参数则返回true，否则返回false<br />
            如果两个参数为同一个节点，返回false
            </returns>
        </member>
        <member name="M:IFramework.Queue.StablePriorityQueue`1.Dequeue">
            <summary>
            队列头部出队
            如果队列为空则执行未定义的操作<br />
            O(log n)
            </summary>
            <returns>出队的元素</returns>
        </member>
        <member name="M:IFramework.Queue.StablePriorityQueue`1.Resize(System.Int32)">
            <summary>
            重新设置队列的大小，使其可以容纳更多的节点，当前的所有节点都会保留<br />
            如果试图将队列大小设置成比当前队列中的数量小时，会执行未定义的操作<br />
            O(n)
            </summary>
        </member>
        <member name="P:IFramework.Queue.StablePriorityQueue`1.first">
            <summary>
            队列的第一个元素<br />
            如果队列为空，则执行未定义的操作<br />
            O(1)
            </summary>
        </member>
        <member name="M:IFramework.Queue.StablePriorityQueue`1.UpdatePriority(`0,System.Single)">
            <summary>
            更改队列里某个节点的优先级<br />
            <b>忘记调用这个方法会导致队列损坏!</b><br />
            对不在这个队列中的节点元素调用这个方法会执行未定义的行为<br />
            O(log n)
            </summary>
        </member>
        <member name="M:IFramework.Queue.StablePriorityQueue`1.Remove(`0)">
            <summary>
            从队列中删除给定节点元素，这个节点不一定是队列的头<br />
            如果节点并未在队列中，结果是未定义的，如果不确定，则先使用Contains()确认<br />
            O(log n)
            </summary>
        </member>
        <member name="M:IFramework.Queue.StablePriorityQueue`1.ResetNode(`0)">
            <summary>
            默认情况下有加入过一个队列的节点元素不能添加到另一个队列<br />
            如果需要这么做，则在添加到另一个队列前调用当前队列的此方法<br />
            如果节点当前在节点中或者属于其他队列，则结果是未定义的
            </summary>
        </member>
        <member name="M:IFramework.Queue.StablePriorityQueue`1.GetEnumerator">
            <summary>
            迭代器
            </summary>
            <returns>迭代器</returns>
        </member>
        <member name="T:IFramework.Queue.StablePriorityQueueNode">
            <summary>
            稳定优先级队列节点
            </summary>
        </member>
        <member name="P:IFramework.Queue.StablePriorityQueueNode.insertPosition">
            <summary>
            元素插入时的序号
            </summary>
        </member>
        <member name="T:IFramework.UpdateModule">
            <summary>
            OnUpdate OnEnable OnDisable
            </summary>
        </member>
        <member name="P:IFramework.UpdateModule.enable">
            <summary>
            开启关闭 Update
            </summary>
        </member>
        <member name="M:IFramework.UpdateModule.SetActive(System.Boolean)">
            <summary>
            改变 enable
            </summary>
            <param name="enable"></param>
        </member>
        <member name="M:IFramework.UpdateModule.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="M:IFramework.UpdateModule.Update">
            <summary>
            刷新
            </summary>
        </member>
        <member name="T:IFramework.OnEnvironmentInitAttribute">
            <summary>
            环境初始化时候调用被标记的静态类
            </summary>
        </member>
        <member name="P:IFramework.OnEnvironmentInitAttribute.type">
            <summary>
            配合初始化的版本 0，
            默认初始化，其他自行规定，用于区分环境，
            一般某个环境特有的静态类和环境编号一致
            </summary>
        </member>
        <member name="M:IFramework.OnEnvironmentInitAttribute.#ctor(IFramework.EnvironmentType)">
            <summary>
            Ctor
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:IFramework.BaseTypePool`1">
            <summary>
            统一类型的对象池
            </summary>
            <typeparam name="T">基础类型</typeparam>
        </member>
        <member name="F:IFramework.BaseTypePool`1.para">
            <summary>
            自旋锁
            </summary>
        </member>
        <member name="M:IFramework.BaseTypePool`1.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:IFramework.BaseTypePool`1.SetPool``1(IFramework.ObjectPool{``0})">
            <summary>
            设置内部对象池
            </summary>
            <typeparam name="Object"></typeparam>
            <param name="pool"></param>
        </member>
        <member name="M:IFramework.BaseTypePool`1.GetPool``1">
            <summary>
            获取内部对象池
            </summary>
            <typeparam name="Object"></typeparam>
        </member>
        <member name="M:IFramework.BaseTypePool`1.SetPool(System.Type,IFramework.IObjectPool)">
            <summary>
            设置内部对象池
            </summary>
            <param name="type"></param>
            <param name="pool"></param>
        </member>
        <member name="M:IFramework.BaseTypePool`1.GetPool(System.Type)">
            <summary>
            获取内部对象池
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.BaseTypePool`1.CreatePool(System.Type)">
            <summary>
            創建对象池
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.BaseTypePool`1.Get(System.Type,IFramework.IEventArgs)">
            <summary>
            获取数据
            </summary>
            <param name="type"></param>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.BaseTypePool`1.Set(System.Type,`0,IFramework.IEventArgs)">
            <summary>
            回收数据
            </summary>
            <param name="type"></param>
            <param name="t"></param>
            <param name="arg"></param>
        </member>
        <member name="M:IFramework.BaseTypePool`1.Get``1(IFramework.IEventArgs)">
            <summary>
            获取数据
            </summary>
            <typeparam name="Object"></typeparam>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.BaseTypePool`1.Set``1(``0,IFramework.IEventArgs)">
            <summary>
            回收数据
            </summary>
            <typeparam name="Object"></typeparam>
            <param name="t"></param>
            <param name="arg"></param>
        </member>
        <member name="M:IFramework.BaseTypePool`1.GetPoolCount``1">
            <summary>
            获取现有数量
            </summary>
            <typeparam name="Object"></typeparam>
            <returns></returns>
        </member>
        <member name="M:IFramework.BaseTypePool`1.GetPoolCount(System.Type)">
            <summary>
            获取现有数量
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.BaseTypePool`1.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="M:IFramework.BaseTypePool`1.OnDispose">
            <summary>
            释放时
            </summary>
        </member>
        <member name="T:IFramework.CapicityPool`1">
            <summary>
            有容量的对象池
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:IFramework.CapicityPool`1.capcity">
            <summary>
            存储容量
            </summary>
        </member>
        <member name="M:IFramework.CapicityPool`1.#ctor(System.Int32)">
            <summary>
            Ctor
            </summary>
            <param name="capcity"></param>
        </member>
        <member name="M:IFramework.CapicityPool`1.OnSet(`0,IFramework.IEventArgs)">
            <summary>
            回收，当数量超过回收失败
            </summary>
            <param name="t"></param>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="T:IFramework.Framework">
            <summary>
            框架入口
            </summary>
        </member>
        <member name="M:IFramework.Framework.CreateEnv(IFramework.EnvironmentType)">
            <summary>
            实例化环境
            </summary>
            <param name=" envType">环境类型</param>
            <returns>环境</returns>
        </member>
        <member name="M:IFramework.Framework.GetEnv(IFramework.EnvironmentType)">
            <summary>
            根据序号获取环境
            </summary>
            <param name=" envType">环境类型</param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Framework.DisposeEnv(IFramework.EnvironmentType)">
            <summary>
            释放环境
            </summary>
            <param name="envType"></param>
        </member>
        <member name="M:IFramework.Framework.BindEnvUpdate(System.Action,IFramework.IEnvironment)">
            <summary>
            绑顶 方法 到一个环境的 Update
            </summary>
            <param name="action">方法</param>
            <param name="env">环境</param>
        </member>
        <member name="M:IFramework.Framework.UnBindEnvUpdate(System.Action,IFramework.IEnvironment)">
            <summary>
            解除绑顶 方法 到一个环境的 Update
            </summary>
            <param name="action">方法</param>
            <param name="env">环境</param>
        </member>
        <member name="M:IFramework.Framework.BindEnvDispose(System.Action,IFramework.IEnvironment)">
            <summary>
            绑顶 方法 到一个环境的 Dispose
            </summary>
            <param name="action">方法</param>
            <param name="env">环境</param>
        </member>
        <member name="M:IFramework.Framework.UnBindEnvDispose(System.Action,IFramework.IEnvironment)">
            <summary>
            解除绑顶 方法 到一个环境的 Dispose
            </summary>
            <param name="action">方法</param>
            <param name="env">环境</param>
        </member>
        <member name="M:IFramework.Framework.BindEnvUpdate(System.Action,IFramework.EnvironmentType)">
            <summary>
            绑顶 方法 到一个环境的 Update
            </summary>
            <param name="action">方法</param>
            <param name=" envType"></param>
        </member>
        <member name="M:IFramework.Framework.UnBindEnvUpdate(System.Action,IFramework.EnvironmentType)">
            <summary>
            解除绑顶 方法 到一个环境的 Update
            </summary>
            <param name="action">方法</param>
            <param name=" envType"></param>
        </member>
        <member name="M:IFramework.Framework.BindEnvDispose(System.Action,IFramework.EnvironmentType)">
            <summary>
            绑顶 方法 到一个环境的 Dispose
            </summary>
            <param name="action">方法</param>
            <param name=" envType"></param>
        </member>
        <member name="M:IFramework.Framework.UnBindEnvDispose(System.Action,IFramework.EnvironmentType)">
            <summary>
            解除绑顶 方法 到一个环境的 Dispose
            </summary>
            <param name="action">方法</param>
            <param name=" envType"></param>
        </member>
        <member name="M:IFramework.Framework.GetGlbalPoolCount``1">
            <summary>
            获取全局对象池数量
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:IFramework.Framework.SetGlbalPool``1(IFramework.ObjectPool{``0})">
            <summary>
            设置全局对象池
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pool"></param>
        </member>
        <member name="M:IFramework.Framework.GlobalAllocate``1(IFramework.IEventArgs)">
            <summary>
            全局分配
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.Framework.GlobalRecyle``1(``0,IFramework.IEventArgs)">
            <summary>
            全局回收
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <param name="arg"></param>
        </member>
        <member name="M:IFramework.Framework.GlobalAllocateArray``1(System.Int32)">
            <summary>
            分配数组
            </summary>
            <typeparam name="T"></typeparam>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="T:IFramework.IEventArgs">
            <summary>
            框架内传递的所有消息的基类
            </summary>
        </member>
        <member name="T:IFramework.ObjectPool`1">
            <summary>
            基础对象池
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:IFramework.ObjectPool`1.pool">
            <summary>
            数据容器
            </summary>
        </member>
        <member name="F:IFramework.ObjectPool`1.para">
            <summary>
            自旋锁
            </summary>
        </member>
        <member name="P:IFramework.ObjectPool`1.type">
            <summary>
            存储数据类型
            </summary>
        </member>
        <member name="P:IFramework.ObjectPool`1.count">
            <summary>
            池子数量
            </summary>
        </member>
        <member name="M:IFramework.ObjectPool`1.OnDispose">
            <summary>
            释放时
            </summary>
        </member>
        <member name="M:IFramework.ObjectPool`1.Get(IFramework.IEventArgs)">
            <summary>
            获取
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.ObjectPool`1.Set(System.Object,IFramework.IEventArgs)">
            <summary>
            回收
            </summary>
            <param name="obj"></param>
            <param name="args"></param>
        </member>
        <member name="M:IFramework.ObjectPool`1.Set(`0,IFramework.IEventArgs)">
            <summary>
            回收
            </summary>
            <param name="t"></param>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.ObjectPool`1.Clear(IFramework.IEventArgs)">
            <summary>
            清除
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:IFramework.ObjectPool`1.Clear(System.Int32,IFramework.IEventArgs)">
            <summary>
            清除
            </summary>
            <param name="count"></param>
            <param name="arg"></param>
        </member>
        <member name="M:IFramework.ObjectPool`1.CreateNew(IFramework.IEventArgs)">
            <summary>
            创建一个新对象
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.ObjectPool`1.OnClear(`0,IFramework.IEventArgs)">
            <summary>
            数据被清除时
            </summary>
            <param name="t"></param>
            <param name="arg"></param>
        </member>
        <member name="M:IFramework.ObjectPool`1.OnSet(`0,IFramework.IEventArgs)">
            <summary>
            数据被回收时，返回true可以回收
            </summary>
            <param name="t"></param>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:IFramework.ObjectPool`1.OnGet(`0,IFramework.IEventArgs)">
            <summary>
            数据被获取时
            </summary>
            <param name="t"></param>
            <param name="arg"></param>
        </member>
        <member name="M:IFramework.ObjectPool`1.OnCreate(`0,IFramework.IEventArgs)">
            <summary>
            数据被创建时
            </summary>
            <param name="t"></param>
            <param name="arg"></param>
        </member>
        <member name="T:IFramework.Singleton.ISingleton">
            <summary>
            单例
            </summary>
        </member>
        <member name="M:IFramework.Singleton.ISingleton.OnSingletonInit">
            <summary>
            单例初始化
            </summary>
        </member>
        <member name="T:IFramework.Singleton.Singleton`1">
            <summary>
            单例基类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:IFramework.Singleton.Singleton`1.instance">
            <summary>
            实例
            </summary>
        </member>
        <member name="M:IFramework.Singleton.Singleton`1.#ctor">
            <summary>
            ctror
            </summary>
        </member>
        <member name="M:IFramework.Singleton.Singleton`1.OnSingletonInit">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:IFramework.Singleton.Singleton`1.Dispose">
            <summary>
            注销
            </summary>
        </member>
        <member name="T:IFramework.Singleton.SingletonCollection">
            <summary>
            单例合集
            </summary>
        </member>
        <member name="M:IFramework.Singleton.SingletonCollection.Set``1(``0)">
            <summary>
            注入单例
            </summary>
            <typeparam name="T"></typeparam>
            <param name="singleton"></param>
        </member>
        <member name="M:IFramework.Singleton.SingletonCollection.Dispose``1">
            <summary>
            注销一个单例
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:IFramework.Singleton.SingletonCollection.Dispose">
            <summary>
            注销所有单例
            </summary>
        </member>
        <member name="T:IFramework.Singleton.SingletonProperty`1">
            <summary>
            单例属性
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:IFramework.Singleton.SingletonProperty`1.instance">
            <summary>
            实例
            </summary>
        </member>
        <member name="M:IFramework.Singleton.SingletonProperty`1.Dispose">
            <summary>
            注销
            </summary>
        </member>
        <member name="T:IFramework.Singleton.SingletonPropertyClass`1">
            <summary>
            单例属性类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:IFramework.Singleton.SingletonPropertyClass`1.instance">
            <summary>
            实例
            </summary>
        </member>
        <member name="M:IFramework.Singleton.SingletonPropertyClass`1.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:IFramework.Singleton.SingletonPropertyClass`1.OnSingletonInit">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:IFramework.Singleton.SingletonPropertyClass`1.Dispose">
            <summary>
            注销
            </summary>
        </member>
    </members>
</doc>
