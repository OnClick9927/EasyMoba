local attrflag = "_attr_"
local fit = "^_"
---@class ObservableObject
ObservableObject = class("ObservableObject")

--- 构造函数
function ObservableObject:ctor()
    self.__actions = {}
    local meta =
    setmetatable(
    {
            __index = function(table, key, value)
                if string.find(key, fit) == 1 then
                    return getmetatable(table)[key]
                else
                    return rawget(table, attrflag .. key) or getmetatable(table)[key]
                end
            end,
            __newindex = function(table, key, value)
                if type(value) == LuaDataType.Function or string.find(key, fit) == 1 then
                    rawset(table, key, value)
                else
                    rawset(table, attrflag .. key, value)
                    getmetatable(table).Invoke(table, key)
                end
            end
    },
        getmetatable(self)
    )
    setmetatable(self, meta)
    local t = self:GetFieldTable()
    if t and type(t) == LuaDataType.Table then
        for k, v in pairs(t) do
            self[k] = v
        end
    end
end

--- 获取字段 例子 {number = 666}
--- @return table
function ObservableObject:GetFieldTable()
end

---Invoke 触发事件
---@param key string 字段
function ObservableObject:Invoke(key)
    if not self.__actions then
        return
    end

    for _, v in pairs(self.__actions) do
        if key == nil or v.key == key then
            v.action()
        end
    end
end

---Subscribe 注册监听
---@param key string 字段
---@param func function 监听方法
function ObservableObject:Subscribe(key, func)
    if key and func then
        table.insert(self.__actions, { key = key, action = func })
        func()
    end
end

---Subscribe 移除监听
---@param key string 字段
---@param func function 监听方法
function ObservableObject:UnSubscribe(key, func)
    if not self.__actions then
        return
    end

    for k, v in pairs(self.__actions) do
        if key == v.key and func == v.action then
            table.remove(self.__actions, k)
            return
        end
    end
end

--- 释放回调
function ObservableObject:OnDispose()
end

---Dispose 释放
function ObservableObject:Dispose()
    self:OnDispose()
    table.Clear(self.__actions)
end
