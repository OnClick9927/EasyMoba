--- @class VVMGroup:Unit
local VVMGroup = class("VVMGroup")
---@param panel IFramework.UI.UIPanel UI
---@param view UIView_MVVM UIView
---@param viewModel ViewModel ViewModel
function VVMGroup:ctor(panel, view, viewModel)
    self.viewModel = viewModel
    ---@type UIView_MVVM
    self.view = view
    self.panel = panel
    -- self.view:BindProperty()
    self.viewModel:Initialize()
end

function VVMGroup:Dispose()
    self.viewModel:Dispose()
    local close = Handler(self.view.OnClose, self.view)
    pcall(close)
    -- self.view:Dispose()
end

---@class LuaGroups_MVVM:LuaGroups
LuaGroups_MVVM = class("LuaGroups_Mvvm", LuaGroups)

function LuaGroups_MVVM:OnDispose()
    for i, group in pairs(self.groups) do
        group:Dispose()
    end
    LuaGroups.onDispose(self)
    self.groups = nil
end

function LuaGroups_MVVM:OnSubscribe(path, name, panel)
    ---@type table<string,VVMGroup>
    self.groups = self.groups or {}
    if self:FindView(path) ~= nil then
        print("same name with panel  " .. path)
        return false
    end
    local vvmType

    for i, v in pairs(self.map) do
        if v.Name == name then
            vvmType = v
            break
        end
    end
    if (vvmType == nil) then
        error("not find vvm type with Name :" .. path)
        return false
    end

    local viewModel = vvmType.VMType()
    local view = vvmType.ViewType(viewModel, panel)
    ---@type VVMGroup
    local vvmGroup = VVMGroup(panel, view, viewModel)
    self.groups[path] = vvmGroup
end

function LuaGroups_MVVM:OnUnSubscribe(path)
    local group = self.groups[path]
    if group ~= nil then
        group:Dispose()
        self.groups[path] = nil
        return true
    end
    return false
end

function LuaGroups_MVVM:FindView(path)
    return self.groups[path] and self.groups[path].view or nil
end

function LuaGroups_MVVM:OnLoad(path)
    ---@type UIView_MVVM
    local view = self:FindView(path)
    view:OnLoad()
    view:BindProperty()
end
